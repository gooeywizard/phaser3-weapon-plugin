{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///WeaponPlugin.min.js","webpack:///webpack/bootstrap d823be90480fb076aac3","webpack:///./consts.js","webpack:///./Bullet.js","webpack:///./main.js","webpack:///./Weapon.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","KILL_NEVER","KILL_LIFESPAN","KILL_DISTANCE","KILL_WEAPON_BOUNDS","KILL_CAMERA_BOUNDS","KILL_WORLD_BOUNDS","KILL_STATIC_BOUNDS","ANGLE_UP","ANGLE_DOWN","ANGLE_LEFT","ANGLE_RIGHT","ANGLE_NORTH_EAST","ANGLE_NORTH_WEST","ANGLE_SOUTH_EAST","ANGLE_SOUTH_WEST","BULLET_FRAME_STABLE","BULLET_FRAME_CYCLE","BULLET_FRAME_RANDOM","_typeof","obj","Symbol","iterator","constructor","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","writable","key","_createClass","protoProps","staticProps","_possibleConstructorReturn","_assertThisInitialized","ReferenceError","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","value","_setPrototypeOf","__WEBPACK_IMPORTED_MODULE_0__consts__","bulletID","Bullet","_Phaser$GameObjects$S","scene","x","y","frame","_this","createBody","data","timeEvent","bulletManager","fromX","fromY","bodyDirty","rotateToVelocity","killType","killDistance","bodyBounds","Phaser","Geom","Rectangle","setActive","setVisible","body","enable","console","log","Physics","Matter","Body","setPosition","isSensor","frictionAir","debugShowBody","debugPhysics","debugShowVelocity","destroy","eventEmitter","emit","active","bulletBounds","bounds","Math","Vector2","distance","kill","Bounds","overlaps","rotation","velocity","atan","bulletWorldWrap","matter","world","wrap","bulletWorldWrapPadding","physics","add","existing","impact","gameObject","GameObjects","Sprite","__WEBPACK_IMPORTED_MODULE_0__Weapon__","__WEBPACK_IMPORTED_MODULE_1__Bullet__","__WEBPACK_IMPORTED_MODULE_2__consts__","WeaponPlugin","_Phaser$Plugins$Scene","pluginManager","weapons","bulletLimit","group","weaponClass","weapon","push","systems","events","on","postRender","preUpdate","update","postUpdate","pause","resume","sleep","wake","shutdown","time","delta","forEach","game","Plugins","ScenePlugin","Weapon","consts","__WEBPACK_IMPORTED_MODULE_0__Bullet__","__WEBPACK_IMPORTED_MODULE_1__consts__","bullets","autoExpandBulletsGroup","autofire","shots","fireLimit","fireRate","fireRateVariance","fireFrom","fireAngle","bulletInheritSpriteSpeed","bulletAnimation","bulletFrameRandom","bulletFrameCycle","bulletAngleOffset","bulletAngleVariance","bulletSpeed","bulletSpeedVariance","bulletLifespan","bulletKillDistance","bulletGravity","bulletRotateToVelocity","bulletKey","bulletFrame","_bulletClass","_bulletCollideWorldBounds","_bulletKillType","_data","customBody","width","height","offsetX","offsetY","getWorldBounds","bulletFrames","bulletFrameIndex","anims","trackedSprite","trackedPointer","multiFire","_hasFired","trackRotation","trackOffset","_nextFire","_tempNextFire","_rotatedPoint","Events","EventEmitter","createBullets","quantity","bulletClass","undefined","classType","maxSize","runChildUpdate","createMultiple","repeat","visible","children","each","child","addMultiple","entries","callback","callbackContext","extraArgs","arguments","paused","newLimit","sprite","set","pointer","input","activePointer","positions","from","offset","fire","position","now","speed","Between","CenterOn","RotateAround","randomX","random","randomY","angle","RadToDeg","atan2","moveX","moveY","cos","DegToRad","sin","bullet","getFirstDead","prepare","bulletKillType","Error","addEvent","delay","bind","lifespan","play","setTexture","nextFrame","floor","setSize","setOffset","collideWorldBounds","bulletCollideWorldBounds","setVelocity","next","rate","min","max","selectionMethod","concat","Utils","Array","NumberArray","frames","frameRate","loop","sys","contains","debugBodies","updateTransform","centerOn","localWorld","type","cameras","main","_bounds"],"mappings":"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","file":"WeaponPlugin.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WeaponPlugin\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WeaponPlugin\"] = factory();\n\telse\n\t\troot[\"WeaponPlugin\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WeaponPlugin\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WeaponPlugin\"] = factory();\n\telse\n\t\troot[\"WeaponPlugin\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  /**\n   * A {@link #bulletKillType} constant that stops the bullets from ever being destroyed automatically.\n   * @constant\n   * @type {integer}\n   */\n  KILL_NEVER: 0,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when their {@link #bulletLifespan} expires.\n   * @constant\n   * @type {integer}\n   */\n  KILL_LIFESPAN: 1,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets after they\n   * exceed the {@link #bulletDistance} from their original firing position.\n   * @constant\n   * @type {integer}\n   */\n  KILL_DISTANCE: 2,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link #bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_WEAPON_BOUNDS: 3,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Phaser.Camera#bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_CAMERA_BOUNDS: 4,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Phaser.World#bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_WORLD_BOUNDS: 5,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link #bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_STATIC_BOUNDS: 6,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face up.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_UP: 270,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face down.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_DOWN: 90,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face left.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_LEFT: 180,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face right.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_RIGHT: 0,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north east.\n   * @constant Phaser.ANGLE_NORTH_EAST\n   * @type {integer}\n   */\n  ANGLE_NORTH_EAST: 315,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north west.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_NORTH_WEST: 225,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south east.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_SOUTH_EAST: 45,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south west.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_SOUTH_WEST: 135,\n\n  /**\n   * When selecting a bullet frame the same frame should always be used. This\n   * is the default value.\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_STABLE: 0,\n\n  /**\n   * When selecting a bullet frame the next frame should be used\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_CYCLE: 1,\n\n  /**\n   * When selecting a bullet frame a random frame should be used.\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_RANDOM: 2\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__consts__ = __webpack_require__(0);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * @author       GooeyWizard\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\n */\n\nvar bulletID = 0;\n\nvar Bullet =\n/*#__PURE__*/\nfunction (_Phaser$GameObjects$S) {\n  _inherits(Bullet, _Phaser$GameObjects$S);\n\n  /**\n   * Create a new `Bullet` object. Bullets are used by the `Weapon` class, and are normal Sprites,\n   * with a few extra properties in the data object to handle Weapon specific features.\n   *\n   * @param {Phaser.Scene} scene - A reference to the currently running scene.\n   * @param {number} x - The x coordinate (in world space) to position the Particle at.\n   * @param {number} y - The y coordinate (in world space) to position the Particle at.\n   * @param {string} key - This is the image or texture used by the Particle during rendering.\n   * It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.\n   * @param {string|number} frame - If this Particle is using part of a sprite sheet or texture atlas\n   * you can specify the exact frame to use by giving a string or numeric index.\n   */\n  function Bullet(scene, x, y, key, frame) {\n    var _this;\n\n    _classCallCheck(this, Bullet);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Bullet).call(this, scene, x, y, key, frame));\n    _this.bulletID = bulletID;\n    bulletID++;\n\n    _this.createBody();\n\n    _this.data = {\n      timeEvent: null,\n      bulletManager: null,\n      fromX: 0,\n      fromY: 0,\n      bodyDirty: true,\n      rotateToVelocity: false,\n      killType: 0,\n      killDistance: 0,\n      bodyBounds: new Phaser.Geom.Rectangle()\n    };\n    return _this;\n  }\n  /**\n   * Prepares this bullet to be fired and interact with the rest of the scene\n   * again.\n   */\n\n\n  _createClass(Bullet, [{\n    key: \"prepare\",\n    value: function prepare(x, y) {\n      this.setActive(true);\n      this.setVisible(true);\n      this.body.enable = true; // this.body.reset(x, y);\n\n      console.log(x, y);\n      Phaser.Physics.Matter.Matter.Body.setPosition(this.body, {\n        x: x,\n        y: y\n      });\n      this.body.isSensor = true;\n      this.body.frictionAir = 0;\n      this.body.debugShowBody = this.data.bulletManager.debugPhysics;\n      this.body.debugShowVelocity = this.data.bulletManager.debugPhysics;\n    }\n    /**\n     * Kills the Bullet, freeing it up for re-use by the Weapon bullet pool.\n     * Also dispatches the `Weapon`s kill signal.\n     * @returns {Bullet} This instance of the bullet class\n     */\n\n  }, {\n    key: \"kill\",\n    value: function kill() {\n      // Reproduce Phaser.Physics.Arcade.Components.Enable.disableBody because\n      // we can't assume that the bullet class has it built in.\n      // this.body.stop();\n      this.body.enable = false;\n      this.setActive(false);\n      this.setVisible(false);\n      this.body.debugShowBody = false;\n      this.body.debugShowVelocity = false; // TODO: potentially we don't need to destroy the time event and we can\n      // just pause when the bullet is killed and restart it when it's refired.\n      // For now though do the simple thing and discard it.\n      // Another option would be to use Date.now() and manually process pause\n      // events with a flag and some math.\n      // Both of those are probably premature optimizations.\n\n      if (this.data.timeEvent !== null) {\n        this.data.timeEvent.destroy();\n        this.data.timeEvent = null;\n      }\n\n      this.data.bulletManager.eventEmitter.emit('kill', this);\n      return this;\n    }\n    /**\n     * Updates the Bullet, killing as required.\n     * @returns {Bullet} This instance of the bullet class\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (!this.active) {\n        // this was previously a check to this.exists\n        return;\n      }\n\n      console.log(this.data.bulletManager.bulletBounds, this.body.bounds);\n\n      if (this.data.killType > __WEBPACK_IMPORTED_MODULE_0__consts__[\"a\" /* default */].KILL_LIFESPAN) {\n        if (this.data.killType === __WEBPACK_IMPORTED_MODULE_0__consts__[\"a\" /* default */].KILL_DISTANCE) {\n          if (new Phaser.Math.Vector2(this.data.fromX, this.data.fromY).distance(this) > this.data.killDistance) {\n            this.kill();\n          }\n        } else if (!Phaser.Physics.Matter.Matter.Bounds.overlaps(this.data.bulletManager.bulletBounds, this.body.bounds) // !Phaser.Geom.Intersects.RectangleToRectangle(\n        //   this.data.bulletManager.bulletBounds,\n        //   this.body.bounds\n        // )\n        ) {\n            this.kill();\n          }\n      }\n\n      if (this.data.rotateToVelocity) {\n        this.rotation = this.body.velocity.atan();\n      }\n\n      if (this.data.bulletManager.bulletWorldWrap) {\n        this.scene.matter.world.wrap(this, this.data.bulletManager.bulletWorldWrapPadding);\n      }\n    }\n  }, {\n    key: \"createBody\",\n    value: function createBody() {\n      if (this.scene.physics) {\n        this.scene.physics.add.existing(this);\n      } else if (this.scene.impact) {// TODO make work with impact physics\n      } else if (this.scene.matter) {\n        this.scene.matter.add.gameObject(this);\n      }\n    }\n  }]);\n\n  return Bullet;\n}(Phaser.GameObjects.Sprite);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Bullet);\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Weapon__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Bullet__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__consts__ = __webpack_require__(0);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\n * @author       GooeyWizard\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\n */\n\n\n\n/**\n * The Weapon Plugin provides the ability to easily create a bullet pool\n * and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with Impact or Matter Physics.\n *\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\n * with a Group, such as move it around the display list, iterate it, etc can\n * be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link Phaser.Scene#create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.set(300, 300);\n * this.input.onDown.add(weapon.fire, this); // Update this\n * ```\n */\n\nvar WeaponPlugin =\n/*#__PURE__*/\nfunction (_Phaser$Plugins$Scene) {\n  _inherits(WeaponPlugin, _Phaser$Plugins$Scene);\n\n  /**\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the\n   *  Phaser.Plugins.PluginManager instance.\n   */\n  function WeaponPlugin(scene, pluginManager) {\n    var _this;\n\n    _classCallCheck(this, WeaponPlugin);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WeaponPlugin).call(this, scene, pluginManager));\n    _this.weapons = []; // Register our new Game Object type\n    // pluginManager.registerGameObject('weapon', this.add);\n\n    return _this;\n  }\n\n  _createClass(WeaponPlugin, [{\n    key: \"add\",\n    value: function add(bulletLimit, key, frame, group, weaponClass) {\n      if (!weaponClass) {\n        weaponClass = __WEBPACK_IMPORTED_MODULE_0__Weapon__[\"a\" /* default */];\n      }\n\n      var weapon = new weaponClass(this.scene, bulletLimit, key, frame, group);\n      this.weapons.push(weapon);\n      return weapon;\n    }\n    /**\n     * Called by the PluginManager when this plugin is started.\n     * If a plugin is stopped, and then started again, this will get called again.\n     * Typically called immediately after `BasePlugin.init`.\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.systems.events.on('postrender', this.postRender, this);\n    }\n    /**\n     * If this is a Scene Plugin (i.e. installed into a Scene) then this method is called when the Scene boots.\n     * By this point the plugin properties `scene` and `systems` will have already been set.\n     * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"boot\",\n    value: function boot() {\n      var eventEmitter = this.systems.events; //  Listening to the following events is entirely optional,\n      //  although we would recommend cleanly shutting down and destroying at least.\n      //  If you don't need any of these events then remove the listeners and the relevant methods too.\n\n      eventEmitter.on('preupdate', this.preUpdate, this);\n      eventEmitter.on('update', this.update, this);\n      eventEmitter.on('postupdate', this.postUpdate, this);\n      eventEmitter.on('pause', this.pause, this);\n      eventEmitter.on('resume', this.resume, this);\n      eventEmitter.on('sleep', this.sleep, this);\n      eventEmitter.on('wake', this.wake, this);\n      eventEmitter.on('shutdown', this.shutdown, this);\n      eventEmitter.on('destroy', this.destroy, this);\n    } //  Called every Scene step - phase 1\n\n  }, {\n    key: \"preUpdate\",\n    value: function preUpdate(time, delta) {} // Empty\n\n    /**\n     * Internal update method, called by the PluginManager.\n     *\n     * @protected\n     * @param {number} time - Current game time\n     * @param {number} delta - Time since last call\n     * @returns {void}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(time, delta) {\n      this.weapons.forEach(function (weapon) {\n        weapon.update();\n      });\n    } //  Called every Scene step - phase 3\n\n  }, {\n    key: \"postUpdate\",\n    value: function postUpdate(time, delta) {} // Empty\n\n    /**\n     * Internal update method, called by the PluginManager.\n     *\n     * @protected\n     * @returns {void}\n     */\n\n  }, {\n    key: \"postRender\",\n    value: function postRender() {\n      this.weapons.forEach(function (weapon) {\n        weapon.postRender();\n      });\n    } //  Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\n\n  }, {\n    key: \"pause\",\n    value: function pause() {} // Empty\n    //  Called when a Scene is resumed from a paused state.\n\n  }, {\n    key: \"resume\",\n    value: function resume() {} // Empty\n    //  Called when a Scene is put to sleep.\n    //  A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\n\n  }, {\n    key: \"sleep\",\n    value: function sleep() {} // Empty\n    //  Called when a Scene is woken from a sleeping state.\n\n  }, {\n    key: \"wake\",\n    value: function wake() {} // Empty\n    //  Called when a Scene shuts down,\n    //  it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\n\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {} // Empty\n\n    /**\n     * Destroys this Weapon.\n     * You must release everything in here, all references, all objects, free it all up.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.pluginManager = null;\n      this.game = null;\n      this.scene = null;\n      this.systems = null;\n    }\n  }]);\n\n  return WeaponPlugin;\n}(Phaser.Plugins.ScenePlugin);\n\nWeaponPlugin.Weapon = __WEBPACK_IMPORTED_MODULE_0__Weapon__[\"a\" /* default */];\nWeaponPlugin.Bullet = __WEBPACK_IMPORTED_MODULE_1__Bullet__[\"a\" /* default */];\nWeaponPlugin.consts = __WEBPACK_IMPORTED_MODULE_2__consts__[\"a\" /* default */]; //  Make sure you export the plugin for webpack to expose\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (WeaponPlugin);\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Bullet__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__consts__ = __webpack_require__(0);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * @author       GooeyWizard\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\n */\n\n\n/**\n * The Weapon provides the ability to easily create a bullet pool and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with P2 Physics.\n *\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\n * with a Group, such as move it around the display list, iterate it, etc can\n * be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link Phaser.Scene#create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.set(300, 300);\n * this.input.onDown.add(weapon.fire, this); // Update this\n * ```\n */\n\nvar Weapon =\n/*#__PURE__*/\nfunction () {\n  /**\n   * TODO: a builder style interface would be neat. Can be kicked way forward\n   * into polishing.\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\n   * @param {number} bulletLimit - The number of bullets to create.\n   * @param {String} key - The texture key for the bullet.\n   * @param {String} frame - The frame name for the bullet.\n   * @param {Phaser.GameObjects.Group} group - A group to add the bullets to.\n   */\n  function Weapon(scene, bulletLimit, key, frame, group) {\n    _classCallCheck(this, Weapon);\n\n    this.scene = scene;\n    this.debugPhysics = null;\n    /**\n     * This is the Phaser.Group that contains all of the bullets managed by this plugin.\n     * @type {Phaser.GameObjects.Group}\n     */\n\n    this.bullets = null;\n    /**\n     * Should the bullet pool run out of bullets (i.e. they are all in flight) then this\n     * boolean controls if the Group will create a brand new bullet object or not.\n     * @type {boolean}\n     * @default\n     */\n\n    this.autoExpandBulletsGroup = false;\n    /**\n     * Will this weapon auto fire? If set to true then a new bullet will be fired\n     * based on the {@link #fireRate} value.\n     * @type {boolean}\n     * @default\n     */\n\n    this.autofire = false;\n    /**\n     * The total number of bullets this Weapon has fired so far.\n     * You can limit the number of shots allowed (via {@link #fireLimit}), and reset\n     * this total via {@link #resetShots}.\n     * @type {number}\n     * @default\n     */\n\n    this.shots = 0;\n    /**\n     * The maximum number of shots that this Weapon is allowed to fire before it stops.\n     * When the limit is his the {@link #onFireLimit} Signal is dispatched.\n     * You can reset the shot counter via {@link #resetShots}.\n     * @type {number}\n     * @default\n     */\n\n    this.fireLimit = 0;\n    /**\n     * The minimum interval between shots, in milliseconds.\n     * @type {number}\n     * @default\n     */\n\n    this.fireRate = 100;\n    /**\n     * This is a modifier that is added to the {@link #fireRate} each update to add variety\n     * to the firing rate of the Weapon. The value is given in milliseconds.\n     * If you've a `fireRate` of 200 and a `fireRateVariance` of 50 then the actual\n     * firing rate of the Weapon will be between 150 and 250.\n     * @type {number}\n     * @default\n     */\n\n    this.fireRateVariance = 0;\n    /**\n     * This is a Rectangle from within which the bullets are fired. By default it's a 1x1\n     * rectangle, the equivalent of a Point. But you can change the width and height, and if\n     * larger than 1x1 it'll pick a random point within the rectangle to launch the bullet from.\n     * @type {Phaser.Geom.Rectangle}\n     */\n\n    this.fireFrom = new Phaser.Geom.Rectangle(0, 0, 1, 1);\n    /**\n     * The angle at which the bullets are fired. This can be a const such as Phaser.ANGLE_UP\n     * or it can be any number from 0 to 360 inclusive, where 0 degrees is to the right.\n     * @type {integer}\n     * @default\n     */\n\n    this.fireAngle = __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].ANGLE_UP;\n    /**\n     * When a Bullet is fired it can optionally inherit the velocity of the `trackedSprite` if set.\n     * @type {boolean}\n     * @default\n     */\n\n    this.bulletInheritSpriteSpeed = false;\n    /**\n     * The string based name of the animation that the Bullet will be given on launch.\n     * This is set via {@link #addBulletAnimation}.\n     * @type {string}\n     * @default\n     */\n\n    this.bulletAnimation = '';\n    /**\n     * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\n     * chose for each Bullet fired to pick a random frame from the set.\n     * @type {boolean}\n     * @default\n     */\n\n    this.bulletFrameRandom = false;\n    /**\n     * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\n     * chose for each Bullet fired to use the next frame in the set. The frame index is then\n     * advanced one frame until it reaches the end of the set, then it starts from the start\n     * again. Cycling frames like this allows you to create varied bullet effects via\n     * sprite sheets.\n     * @type {boolean}\n     * @default\n     */\n\n    this.bulletFrameCycle = false;\n    /**\n     * Should the Bullets wrap around the world bounds? This automatically calls\n     * `World.wrap` on the Bullet each frame. See the docs for that method for details.\n     * @type {boolean}\n     * @default\n     */\n\n    this.bulletWorldWrap = false;\n    /**\n     * If `bulletWorldWrap` is true then you can provide an optional padding value with this\n     * property. It's added to the calculations determining when the Bullet should wrap around\n     * the world or not. The value is given in pixels.\n     * @type {integer}\n     * @default\n     */\n\n    this.bulletWorldWrapPadding = 0;\n    /**\n     * An optional angle offset applied to the Bullets when they are launched.\n     * This is useful if for example your bullet sprites have been drawn facing up, instead of\n     * to the right, and you want to fire them at an angle. In which case you can set the\n     * angle offset to be 90 and they'll be properly rotated when fired.\n     * @type {number}\n     * @default\n     */\n\n    this.bulletAngleOffset = 0;\n    /**\n     * This is a variance added to the angle of Bullets when they are fired.\n     * If you fire from an angle of 90 and have a `bulletAngleVariance` of 20 then the actual\n     * angle of the Bullets will be between 70 and 110 degrees. This is a quick way to add a\n     * great 'spread' effect to a Weapon.\n     * @type {number}\n     * @default\n     */\n\n    this.bulletAngleVariance = 0;\n    /**\n     * The initial velocity of fired bullets, in pixels per second.\n     * @type {number}\n     * @default\n     */\n\n    this.bulletSpeed = 200;\n    /**\n     * This is a variance added to the speed of Bullets when they are fired.\n     * If bullets have a {@link #bulletSpeed} value of 200, and a `bulletSpeedVariance` of 50\n     * then the actual speed of the Bullets will be between 150 and 250 pixels per second.\n     * @type {number}\n     * @default\n     */\n\n    this.bulletSpeedVariance = 0;\n    /**\n     * If you've set {@link #bulletKillType} to `consts.KILL_LIFESPAN` this controls the amount\n     * of lifespan the Bullets have set on launch. The value is given in milliseconds.\n     * When a Bullet hits its lifespan limit it will be automatically killed.\n     * @type {number}\n     * @default\n     */\n\n    this.bulletLifespan = 0;\n    /**\n     * If you've set {@link #bulletKillType} to `consts.KILL_DISTANCE` this controls the distance\n     * the Bullet can travel before it is automatically killed. The distance is given in pixels.\n     * @type {number}\n     * @default\n     */\n\n    this.bulletKillDistance = 0;\n    /**\n     * This is the amount of {@link Phaser.Physics.Arcade.Body#gravity} added to the Bullets physics body when fired.\n     * Gravity is expressed in pixels / second / second.\n     * @type {Phaser.Math.Vector2}\n     */\n\n    this.bulletGravity = new Phaser.Math.Vector2(0, 0);\n    /**\n     * Bullets can optionally adjust their rotation in-flight to match their velocity.\n     * This can create the effect of a bullet 'pointing' to the path it is following, for example\n     * an arrow being fired from a bow, and works especially well when added to {@link #bulletGravity}.\n     * @type {boolean}\n     * @default\n     */\n\n    this.bulletRotateToVelocity = false;\n    /**\n     * The Texture Key that the Bullets use when rendering.\n     * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n     * @type {string}\n     * @default\n     */\n\n    this.bulletKey = key || '';\n    /**\n     * The Texture Frame that the Bullets use when rendering.\n     * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n     * @type {string|integer}\n     * @default\n     */\n\n    this.bulletFrame = frame || '';\n    /**\n     * Private var that holds the public `bulletClass` property.\n     * @type {function}\n     * @private\n     */\n\n    this._bulletClass = __WEBPACK_IMPORTED_MODULE_0__Bullet__[\"a\" /* default */];\n    /**\n     * Private var that holds the public `bulletCollideWorldBounds` property.\n     * @type {boolean}\n     * @private\n     */\n\n    this._bulletCollideWorldBounds = false;\n    /**\n     * Private var that holds the public `bulletKillType` property.\n     * @type {integer}\n     * @private\n     */\n\n    this._bulletKillType = __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].KILL_WORLD_BOUNDS;\n    /**\n     * Holds internal data about custom bullet body sizes.\n     *\n     * @type {Object}\n     * @private\n     */\n\n    this._data = {\n      customBody: false,\n      width: 0,\n      height: 0,\n      offsetX: 0,\n      offsetY: 0\n    };\n    /**\n     * This Rectangle defines the bounds that are used when determining if a Bullet should be killed or not.\n     * It's used in combination with {@link #bulletKillType} when that is set to either `consts.KILL_WEAPON_BOUNDS`\n     * or `consts.KILL_STATIC_BOUNDS`. If you are not using either of these kill types then the bounds are ignored.\n     * If you are tracking a Sprite or Point then the bounds are centered on that object every frame.\n     *\n     * @type {Phaser.Geom.Rectangle}\n     */\n\n    this.bounds = new Phaser.Geom.Rectangle();\n    /**\n     * The Rectangle used to calculate the bullet bounds from.\n     *\n     * @type {Phaser.Geom.Rectangle}\n     * @private\n     */\n\n    this.bulletBounds = this.getWorldBounds();\n    /**\n     * This array stores the frames added via @link #setBulletFrames.\n     *\n     * @type {Array}\n     * @protected\n     */\n\n    this.bulletFrames = [];\n    /**\n     * The index of the frame within {@link #bulletFrames} that is currently being used.\n     * This value is only used if {@link #bulletFrameCycle} is set to `true`.\n     * @type {number}\n     * @private\n     */\n\n    this.bulletFrameIndex = 0;\n    /**\n     * An internal object that stores the animation data added via {@link #addBulletAnimation}.\n     * @type {Object}\n     * @private\n     */\n\n    this.anims = {};\n    /**\n     * The Sprite currently being tracked by the Weapon, if any.\n     * This is set via the {@link #trackSprite} method.\n     *\n     * @type {Phaser.GameObjects.Sprite|Object}\n     */\n\n    this.trackedSprite = null;\n    /**\n     * The Pointer currently being tracked by the Weapon, if any.\n     * This is set via the {@link #trackPointer} method.\n     *\n     * @type {Phaser.Input.Pointer}\n     */\n\n    this.trackedPointer = null;\n    /**\n     * If you want this Weapon to be able to fire more than 1 bullet in a single\n     * update, then set this property to `true`. When `true` the Weapon plugin won't\n     * set the shot / firing timers until the `postRender` phase of the game loop.\n     * This means you can call `fire` (and similar methods) as often as you like in one\n     * single game update.\n     *\n     * @type {boolean}\n     * @default\n     */\n\n    this.multiFire = false;\n    /**\n     * Internal multiFire test flag.\n     *\n     * @type {boolean}\n     */\n\n    this._hasFired = false;\n    /**\n     * If the Weapon is tracking a Sprite, should it also track the Sprites rotation?\n     * This is useful for a game such as Asteroids, where you want the weapon to fire based\n     * on the sprites rotation.\n     *\n     * @type {boolean}\n     * @default\n     */\n\n    this.trackRotation = false;\n    /**\n     * The Track Offset is a Vector2 object that allows you to specify a pixel offset that bullets use\n     * when launching from a tracked Sprite or Pointer. For example if you've got a bullet that is 2x2 pixels\n     * in size, but you're tracking a Sprite that is 32x32, then you can set `trackOffset.x = 16` to have\n     * the bullet launched from the center of the Sprite.\n     *\n     * @type {Phaser.Math.Vector2}\n     */\n\n    this.trackOffset = new Phaser.Math.Vector2();\n    /**\n     * Internal firing rate time tracking variable.\n     *\n     * @type {number}\n     * @private\n     */\n\n    this._nextFire = 0;\n    /**\n     * Internal firing rate time tracking variable used by multiFire.\n     *\n     * @type {number}\n     * @private\n     */\n\n    this._tempNextFire = 0;\n    /**\n     * Internal firing rotation tracking point.\n     *\n     * @type {Phaser.Math.Vector2}\n     * @private\n     */\n\n    this._rotatedPoint = new Phaser.Math.Vector2();\n    this.eventEmitter = new Phaser.Events.EventEmitter();\n    this.createBullets(bulletLimit, key, frame, group);\n  }\n  /**\n   * This method performs two actions: First it will check to see if the\n   * {@link #bullets} Group exists or not, and if not it creates it, adding its\n   * children to the `group` given as the 4th argument.\n   *\n   * Then it will seed the bullet pool with the `quantity` number of Bullets,\n   * using the texture key and frame provided (if any).\n   *\n   * If for example you set the quantity to be 10, then this Weapon will only\n   * ever be able to have 10 bullets in-flight simultaneously. If you try to\n   * fire an 11th bullet then nothing will happen until one, or more, of the\n   * in-flight bullets have been killed, freeing them up for use by the Weapon\n   * again.\n   *\n   * If you do not wish to have a limit set, then pass in -1 as the quantity.\n   * In this instance the Weapon will keep increasing the size of the bullet\n   * pool as needed. It will never reduce the size of the pool however, so be\n   * careful it doesn't grow too large.\n   *\n   * You can either set the texture key and frame here, or via the\n   * {@link #bulletKey} and {@link #bulletFrame} properties. You can also\n   * animate bullets, or set them to use random frames. All Bullets belonging\n   * to a single Weapon instance must share the same texture key however.\n   *\n   * @param {integer} [quantity=1] - The quantity of bullets to seed the Weapon\n   *  with. If -1 it will set the pool to automatically expand.\n   * @param {string} [key] - The Game.cache key of the image that this Sprite\n   *  will use.\n   * @param {integer|string} [frame] - If the Sprite image contains multiple\n   *  frames you can specify which one to use here.\n   * @param {Phaser.GameObjects.Group} [group] - Optional Group to add the\n   *  object to. If not specified it will be added to the World group.\n   * @return {Weapon} This Weapon instance.\n   */\n\n\n  _createClass(Weapon, [{\n    key: \"createBullets\",\n    value: function createBullets(quantity, key, frame, group, bulletClass) {\n      if (quantity === undefined) {\n        quantity = 1;\n      }\n\n      if (bulletClass) {\n        this._bulletClass = bulletClass;\n      }\n      /*if (group === undefined) {\n        group = this.game.world;\n      }*/\n\n\n      if (this.bullets && !this.bullets.scene) {\n        this.bullets = null;\n      }\n\n      if (!this.bullets) {\n        this.bullets = this.scene.add.group({\n          classType: this._bulletClass,\n          maxSize: quantity,\n          runChildUpdate: true\n        });\n      }\n\n      if (quantity !== 0) {\n        if (quantity === -1) {\n          this.autoExpandBulletsGroup = true;\n          quantity = 1;\n        }\n\n        this.bullets.createMultiple({\n          key: key,\n          frame: frame,\n          repeat: quantity,\n          active: false,\n          visible: false\n        });\n        this.bullets.children.each(function (child) {\n          child.data.bulletManager = this;\n        }, this);\n        this.bulletKey = key;\n        this.bulletFrame = frame;\n\n        if (group) {\n          group.addMultiple(this.bullets.children.entries);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Call a function on each in-flight bullet in this Weapon.\n     *\n     * See {@link Phaser.GameObjects.Group#forEachExists forEachExists} for more details.\n     *\n     * @param {function} callback - The function that will be called for each applicable child.\n     * The child will be passed as the first argument.\n     * @param {object} callbackContext - The context in which the function should be called (usually 'this').\n     * @param {...any} [args=(none)] - Additional arguments to pass to the callback function, after the child item.\n     * @return {Weapon} This Weapon instance.\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, callbackContext) {\n      var extraArgs = arguments;\n      this.bullets.children.each(function (child) {\n        if (child.active) {\n          callback.call(callbackContext, child, extraArgs);\n        }\n      });\n      return this;\n    }\n    /**\n     * Sets {@link Phaser.Physics.Arcade.Body#enable} to `false` on each bullet in this Weapon.\n     * This has the effect of stopping them in-flight should they be moving.\n     * It also stops them being able to be checked for collision.\n     *\n     * @return {Weapon} This Weapon instance.\n     */\n\n  }, {\n    key: \"pauseAll\",\n    value: function pauseAll() {\n      this.bullets.children.each(function (child) {\n        child.body.enable = false;\n\n        if (child.data.timeEvent !== null) {\n          child.data.timeEvent.paused = true;\n        }\n      }, this);\n      return this;\n    }\n    /**\n     * Sets {@link Phaser.Physics.Arcade.Body#enable} to `true` on each bullet in this Weapon.\n     * This has the effect of resuming their motion should they be in-flight.\n     * It also enables them for collision checks again.\n     *\n     * @return {Weapon} This Weapon instance.\n     */\n\n  }, {\n    key: \"resumeAll\",\n    value: function resumeAll() {\n      this.bullets.children.each(function (child) {\n        child.body.enable = true;\n\n        if (child.data.timeEvent !== null) {\n          child.data.timeEvent.paused = false;\n        }\n      }, this);\n      return this;\n    }\n    /**\n     * Calls {@link Phaser.Bullet#kill} on every in-flight bullet in this Weapon.\n     * Also re-enables their physics bodies, should they have been disabled via {@link #pauseAll}.\n     *\n     * @return {Weapon} This Weapon instance.\n     */\n\n  }, {\n    key: \"killAll\",\n    value: function killAll() {\n      this.bullets.children.each(function (child) {\n        if (child.active) {\n          child.kill();\n        }\n\n        child.body.enable = true;\n      });\n      return this;\n    }\n    /**\n     * Resets the {@link #shots} counter back to zero. This is used when you've set\n     * {@link #fireLimit} and have hit (or just wish to reset) your limit.\n     *\n     * @param {integer} [newLimit] - Optionally set a new {@link #fireLimit}.\n     * @return {Weapon} This Weapon instance.\n     */\n\n  }, {\n    key: \"resetShots\",\n    value: function resetShots(newLimit) {\n      this.shots = 0;\n\n      if (newLimit !== undefined) {\n        this.fireLimit = newLimit;\n      }\n\n      return this;\n    }\n    /**\n     * Sets this Weapon to track the given Sprite, or any Object with a public {@link Phaser.Component.Core#world world}\n     * Point object. When a Weapon tracks a Sprite it will automatically update its {@link #fireFrom} value to match the\n     * Sprite's position within the Game World, adjusting the coordinates based on the offset arguments.\n     *\n     * This allows you to lock a Weapon to a Sprite, so that bullets are always launched from its location.\n     *\n     * Calling `trackSprite` will reset {@link #trackedPointer} to null, should it have been set, as you can\n     * only track _either_ a Sprite, or a Pointer, at once, but not both.\n     *\n     * @param {Phaser.GameObjects.Sprite|Object} sprite - The Sprite to track the position of.\n     * @param {integer} [offsetX=0] - The horizontal offset from the Sprites position to be applied to the Weapon.\n     * @param {integer} [offsetY=0] - The vertical offset from the Sprites position to be applied to the Weapon.\n     * @param {boolean} [trackRotation=false] - Should the Weapon also track the Sprites rotation?\n     * @return {Weapon} This Weapon instance.\n     */\n\n  }, {\n    key: \"trackSprite\",\n    value: function trackSprite(sprite, offsetX, offsetY, trackRotation) {\n      if (offsetX === undefined) {\n        offsetX = 0;\n      }\n\n      if (offsetY === undefined) {\n        offsetY = 0;\n      }\n\n      if (trackRotation === undefined) {\n        trackRotation = false;\n      }\n\n      this.trackedPointer = null;\n      this.trackedSprite = sprite;\n      this.trackRotation = trackRotation;\n      this.trackOffset.set(offsetX, offsetY);\n      return this;\n    }\n    /**\n     * Sets this Weapon to track the given Pointer.\n     * When a Weapon tracks a Pointer it will automatically update its {@link #fireFrom} value to match the Pointer's\n     * position within the Game World, adjusting the coordinates based on the offset arguments.\n     *\n     * This allows you to lock a Weapon to a Pointer, so that bullets are always launched from its location.\n     *\n     * Calling `trackPointer` will reset {@link #trackedSprite} to null, should it have been set, as you can\n     * only track _either_ a Pointer, or a Sprite, at once, but not both.\n     *\n     * @param {Phaser.Input.Pointer} [pointer] - The Pointer to track the position of.\n     * Defaults to `Input.activePointer` if not specified.\n     * @param {integer} [offsetX=0] - The horizontal offset from the Pointers position to be applied to the Weapon.\n     * @param {integer} [offsetY=0] - The vertical offset from the Pointers position to be applied to the Weapon.\n     * @return {Weapon} This Weapon instance.\n     */\n\n  }, {\n    key: \"trackPointer\",\n    value: function trackPointer(pointer, offsetX, offsetY) {\n      if (pointer === undefined && this.scene.input) {\n        pointer = this.scene.input.activePointer;\n      }\n\n      if (offsetX === undefined) {\n        offsetX = 0;\n      }\n\n      if (offsetY === undefined) {\n        offsetY = 0;\n      }\n\n      this.trackedPointer = pointer;\n      this.trackedSprite = null;\n      this.trackRotation = false;\n      this.trackOffset.set(offsetX, offsetY);\n      return this;\n    }\n    /**\n     * Attempts to fire multiple bullets from the positions defined in the given array.\n     *\n     * If you provide a `from` argument, or if there is a tracked Sprite or Pointer, then\n     * the positions are treated as __offsets__ from the given objects position.\n     *\n     * If `from` is undefined, and there is no tracked object, then the bullets are fired\n     * from the given positions, as they exist in the world.\n     *\n     * Calling this method sets {@link #multiFire} to `true`.\n     *\n     * If there are not enough bullets available in the pool, and the pool cannot be extended,\n     * then this method may not fire from all of the given positions.\n     *\n     * When the bullets are launched they have their texture and frame updated, as required.\n     * The velocity of the bullets are calculated based on Weapon properties like {@link #bulletSpeed}.\n     *\n     * @param {array} positions - An array of positions. Each position can be any Object,\n     * as long as it has public `x` and `y` properties, such as Phaser.Point, { x: 0, y: 0 }, Phaser.Sprite, etc.\n     * @param {Phaser.GameObject.Sprite|Phaser.Math.Vector2|Object|string} [from]\n     * Optionally fires the bullets **from** the `x` and `y` properties of this object,\n     * _instead_ of any {@link #trackedSprite} or `trackedPointer` that is set.\n     * @return {array} An array containing all of the fired Phaser.Bullet objects,\n     * if a launch was successful, otherwise an empty array.\n     */\n\n  }, {\n    key: \"fireMany\",\n    value: function fireMany(positions, from) {\n      var _this = this;\n\n      this.multiFire = true;\n      var bullets = [];\n\n      if (from || this.trackedSprite || this.trackedPointer) {\n        positions.forEach(function (offset) {\n          bullets.push(_this.fire(from, null, null, offset.x, offset.y));\n        });\n      } else {\n        positions.forEach(function (position) {\n          bullets.push(_this.fire(position));\n        });\n      }\n\n      return bullets;\n    }\n    /**\n     * Attempts to fire a single Bullet from a tracked Sprite or Pointer, but applies an offset\n     * to the position first. This is the same as calling {@link #fire} and passing in the offset arguments.\n     *\n     * If there are no more bullets available in the pool, and the pool cannot be extended,\n     * then this method returns `null`. It will also return `null` if not enough time has expired since the last time\n     * the Weapon was fired, as defined in the {@link #fireRate} property.\n     *\n     * Otherwise the first available bullet is selected, launched, and returned.\n     *\n     * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n     * calculated based on Weapon properties like {@link #bulletSpeed}.\n     *\n     * If you wish to fire multiple bullets in a single game update, then set {@link #multiFire} to `true`\n     * and you can call this method as many times as you like, per loop. See also {@link #fireMany}.\n     *\n     * @param {number} [offsetX=0] - The horizontal offset from the position of the tracked Sprite or Pointer,\n     * as set with {@link #trackSprite}.\n     * @param {number} [offsetY=0] - The vertical offset from the position of the tracked Sprite or Pointer,\n     * as set with {@link #trackSprite}.\n     * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\n     */\n\n  }, {\n    key: \"fireOffset\",\n    value: function fireOffset(offsetX, offsetY) {\n      if (offsetX === undefined) {\n        offsetX = 0;\n      }\n\n      if (offsetY === undefined) {\n        offsetY = 0;\n      }\n\n      return this.fire(null, null, null, offsetX, offsetY);\n    }\n    /**\n     * Fires a bullet **at** the given Pointer. The bullet will be launched from the {@link #fireFrom} position,\n     * or from a Tracked Sprite or Pointer, if you have one set.\n     *\n     * @param {Phaser.Input.Pointer} [pointer] - The Pointer to fire the bullet towards.\n     * @return {Bullet} The fired bullet if successful, null otherwise.\n     */\n\n  }, {\n    key: \"fireAtPointer\",\n    value: function fireAtPointer(pointer) {\n      if (pointer === undefined && this.scene.input) {\n        pointer = this.scene.input.activePointer;\n      }\n\n      return this.fire(null, pointer.x, pointer.y);\n    }\n    /**\n     * Fires a bullet **at** the given Sprite. The bullet will be launched from the {@link #fireFrom} position,\n     * or from a Tracked Sprite or Pointer, if you have one set.\n     *\n     * @param {Phaser.GameObjects.Sprite} [sprite] - The Sprite to fire the bullet towards.\n     * @return {Bullet} The fired bullet if successful, null otherwise.\n     */\n\n  }, {\n    key: \"fireAtSprite\",\n    value: function fireAtSprite(sprite) {\n      return this.fire(null, sprite.x, sprite.y);\n    }\n    /**\n     * Fires a bullet **at** the given coordinates. The bullet will be launched from the {@link #fireFrom} position,\n     * or from a Tracked Sprite or Pointer, if you have one set.\n     *\n     * @param {number} [x] - The x coordinate, in world space, to fire the bullet towards.\n     * @param {number} [y] - The y coordinate, in world space, to fire the bullet towards.\n     * @return {Bullet} The fired bullet if successful, null otherwise.\n     */\n\n  }, {\n    key: \"fireAtXY\",\n    value: function fireAtXY(x, y) {\n      return this.fire(null, x, y);\n    }\n    /**\n     * Attempts to fire a single Bullet. If there are no more bullets available in the pool,\n     * and the pool cannot be extended, then this method returns `null`. It will also return `null`\n     * if not enough time has expired since the last time the Weapon was fired,\n     * as defined in the {@link #fireRate} property.\n     *\n     * Otherwise the first available bullet is selected, launched, and returned.\n     *\n     * The arguments are all optional, but allow you to control both where the bullet is launched from, and aimed at.\n     *\n     * If you don't provide any of the arguments then it uses those set via properties such as {@link #trackedSprite},\n     * {@link #bulletAngle} and so on.\n     *\n     * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n     * calculated based on Weapon properties like `bulletSpeed`.\n     *\n     * If you wish to fire multiple bullets in a single game update, then set `Weapon.multiFire = true`\n     * and you can call `fire` as many times as you like, per loop. Multiple fires in a single update\n     * only counts once towards the `shots` total, but you will still receive a Signal for each bullet.\n     *\n     * @param {Phaser.GameObjects.Sprite|Phaser.Math.Vector2|Object|string} [from]\n     * Optionally fires the bullet **from** the `x` and `y` properties of this object.\n     * If set this overrides {@link #trackedSprite} or `trackedPointer`. Pass `null` to ignore it.\n     * @param {number} [x] - The x coordinate, in world space, to fire the bullet **towards**.\n     * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n     * @param {number} [y] - The y coordinate, in world space, to fire the bullet **towards**.\n     * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n     * @param {number} [offsetX=0] - If the bullet is fired from a tracked Sprite or Pointer,\n     * or the `from` argument is set, this applies a horizontal offset from the launch position.\n     * @param {number} [offsetY=0] - If the bullet is fired from a tracked Sprite or Pointer,\n     * or the `from` argument is set, this applies a vertical offset from the launch position.\n     * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\n     */\n\n  }, {\n    key: \"fire\",\n    value: function fire(from, x, y, offsetX, offsetY) {\n      if (x === undefined) {\n        x = null;\n      }\n\n      if (y === undefined) {\n        y = null;\n      }\n\n      if (this.scene.time.now < this._nextFire || this.fireLimit > 0 && this.shots === this.fireLimit) {\n        return null;\n      }\n\n      var speed = this.bulletSpeed; //  Apply +- speed variance\n\n      if (this.bulletSpeedVariance !== 0) {\n        speed += Phaser.Math.Between(-this.bulletSpeedVariance, this.bulletSpeedVariance);\n      }\n\n      if (from) {\n        if (this.fireFrom.width > 1) {\n          this.fireFrom.CenterOn(from.x, from.y);\n        } else {\n          this.fireFrom.x = from.x;\n          this.fireFrom.y = from.y;\n        }\n      } else if (this.trackedSprite) {\n        if (this.trackRotation) {\n          this._rotatedPoint.set(this.trackedSprite.x + this.trackOffset.x, this.trackedSprite.y + this.trackOffset.y);\n\n          Phaser.Math.RotateAround(this._rotatedPoint, this.trackedSprite.x, this.trackedSprite.y, this.trackedSprite.rotation);\n\n          if (this.fireFrom.width > 1) {\n            this.fireFrom.CenterOn(this._rotatedPoint.x, this._rotatedPoint.y);\n          } else {\n            this.fireFrom.x = this._rotatedPoint.x;\n            this.fireFrom.y = this._rotatedPoint.y;\n          }\n        } else if (this.fireFrom.width > 1) {\n          this.fireFrom.CenterOn(this.trackedSprite.x + this.trackOffset.x, this.trackedSprite.y + this.trackOffset.y);\n        } else {\n          this.fireFrom.x = this.trackedSprite.x + this.trackOffset.x;\n          this.fireFrom.y = this.trackedSprite.y + this.trackOffset.y;\n        }\n\n        if (this.bulletInheritSpriteSpeed) {\n          speed += this.trackedSprite.body.speed;\n        }\n      } else if (this.trackedPointer) {\n        if (this.fireFrom.width > 1) {\n          this.fireFrom.CenterOn(this.trackedPointer.x + this.trackOffset.x, this.trackedPointer.y + this.trackOffset.y);\n        } else {\n          this.fireFrom.x = this.trackedPointer.x + this.trackOffset.x;\n          this.fireFrom.y = this.trackedPointer.y + this.trackOffset.y;\n        }\n      }\n\n      if (offsetX !== undefined) {\n        this.fireFrom.x += offsetX;\n      }\n\n      if (offsetY !== undefined) {\n        this.fireFrom.y += offsetY;\n      }\n\n      var randomX = this.fireFrom.x + Math.random() * this.fireFrom.width;\n      var randomY = this.fireFrom.y + Math.random() * this.fireFrom.height;\n      var fromX = this.fireFrom.width > 1 ? randomX : this.fireFrom.x;\n      var fromY = this.fireFrom.height > 1 ? randomY : this.fireFrom.y;\n      var angle = this.trackRotation ? this.trackedSprite.angle : this.fireAngle; //  The position (in world space) to fire the bullet towards, if set\n\n      if (x !== null && y !== null) {\n        angle = Phaser.Math.RadToDeg(Math.atan2(y - fromY, x - fromX));\n      } //  Apply +- angle variance\n\n\n      if (this.bulletAngleVariance !== 0) {\n        angle += Phaser.Math.Between(-this.bulletAngleVariance, this.bulletAngleVariance);\n      }\n\n      var moveX = 0;\n      var moveY = 0; //  Avoid sin/cos for right-angled shots\n\n      if (angle === 0 || angle === 180) {\n        moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n      } else if (angle === 90 || angle === 270) {\n        moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n      } else {\n        moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n        moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n      }\n\n      var bullet = null;\n\n      if (this.autoExpandBulletsGroup) {\n        bullet = this.bullets.getFirstDead(true, fromX, fromY, this.bulletKey, this.bulletFrame);\n        bullet.data.bulletManager = this;\n      } else {\n        bullet = this.bullets.getFirstDead(false);\n      }\n\n      if (bullet) {\n        bullet.prepare(fromX, fromY);\n        bullet.data.fromX = fromX;\n        bullet.data.fromY = fromY;\n        bullet.data.killType = this.bulletKillType;\n        bullet.data.killDistance = this.bulletKillDistance;\n        bullet.data.rotateToVelocity = this.bulletRotateToVelocity;\n\n        if (this.bulletKillType === __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].KILL_LIFESPAN) {\n          if (this.bulletLifespan <= 0) {\n            throw new Error('Invalid bulletLifespan; must be > 0');\n          }\n\n          bullet.data.timeEvent = this.scene.time.addEvent({\n            delay: this.bulletLifespan,\n            // TODO: test to see if we can just pass callbackContext: bullet and\n            // have it work. no need to re-bind every time we fire a bullet\n            callback: bullet.kill.bind(bullet)\n          });\n          bullet.lifespan = this.bulletLifespan;\n        }\n\n        bullet.angle = angle + this.bulletAngleOffset; //  Frames and Animations\n\n        if (this.bulletAnimation) {\n          bullet.anims.play(this.bulletAnimation);\n        } else if (this.bulletFrameCycle) {\n          if (this.bulletFrameIndex >= this.bulletFrames.length) {\n            this.bulletFrameIndex = 0;\n          }\n\n          bullet.setTexture(this.bulletKey, this.bulletFrameIndex);\n          this.bulletFrameIndex++;\n        } else if (this.bulletFrameRandom) {\n          var nextFrame = Math.floor(Math.random() * this.bulletFrames.length);\n          bullet.setTexture(this.bulletKey, nextFrame);\n        }\n\n        if (bullet.data.bodyDirty) {\n          if (this._data.customBody) {\n            bullet.body.setSize(this._data.width, this._data.height);\n            bullet.body.setOffset(this._data.offsetX, this._data.offsetY);\n          }\n\n          bullet.body.collideWorldBounds = this.bulletCollideWorldBounds;\n          bullet.data.bodyDirty = false;\n        } // bullet.body.setVelocity(moveX, moveY);\n\n\n        console.log(moveX, moveY);\n        Phaser.Physics.Matter.Matter.Body.setVelocity(bullet.body, {\n          x: moveX / 100,\n          y: moveY / 100\n        }); // bullet.body.setGravity(this.bulletGravity.x, this.bulletGravity.y);\n\n        var next = 0;\n\n        if (this.bulletSpeedVariance !== 0) {\n          var rate = this.fireRate;\n          rate += Phaser.Math.Between(-this.fireRateVariance, this.fireRateVariance);\n\n          if (rate < 0) {\n            rate = 0;\n          }\n\n          next = this.scene.time.now + rate;\n        } else {\n          next = this.scene.time.now + this.fireRate;\n        }\n\n        if (this.multiFire) {\n          if (!this._hasFired) {\n            //  We only add 1 to the 'shots' count for multiFire shots\n            this._hasFired = true;\n            this._tempNextFire = next;\n            this.shots++;\n          }\n        } else {\n          this._nextFire = next;\n          this.shots++;\n        }\n\n        this.eventEmitter.emit('fire', bullet, this, speed);\n\n        if (this.fireLimit > 0 && this.shots === this.fireLimit) {\n          this.eventEmitter('firelimit', this, this.fireLimit);\n        }\n      }\n\n      return bullet;\n    }\n    /**\n     * You can modify the size of the physics Body the Bullets use to be any dimension you need.\n     * This allows you to make it smaller, or larger, than the parent Sprite.\n     * You can also control the x and y offset of the Body. This is the position of the\n     * Body relative to the top-left of the Sprite _texture_.\n     *\n     * For example: If you have a Sprite with a texture that is 80x100 in size,\n     * and you want the physics body to be 32x32 pixels in the middle of the texture, you would do:\n     *\n     * `setSize(32 / Math.abs(this.scale.x), 32 / Math.abs(this.scale.y), 24, 34)`\n     *\n     * Where the first two parameters are the new Body size (32x32 pixels) relative to the Sprite's scale.\n     * 24 is the horizontal offset of the Body from the top-left of the Sprites texture, and 34\n     * is the vertical offset.\n     *\n     * @param {number} width - The width of the Body.\n     * @param {number} height - The height of the Body.\n     * @param {number} [offsetX] - The X offset of the Body from the top-left of the Sprites texture.\n     * @param {number} [offsetY] - The Y offset of the Body from the top-left of the Sprites texture.\n     * @return {Weapon} The Weapon Plugin.\n     */\n\n  }, {\n    key: \"setBulletBodyOffset\",\n    value: function setBulletBodyOffset(width, height, offsetX, offsetY) {\n      if (offsetX === undefined) {\n        offsetX = 0;\n      }\n\n      if (offsetY === undefined) {\n        offsetY = 0;\n      }\n\n      this._data.customBody = true;\n      this._data.width = width;\n      this._data.height = height;\n      this._data.offsetX = offsetX;\n      this._data.offsetY = offsetY; //  Update all bullets in the pool\n\n      this.bullets.children.each(function (child) {\n        child.body.setSize(width, height);\n        child.body.setOffset(offsetX, offsetY);\n      }); //this.bullets.setAll('data.bodyDirty', false);\n\n      return this;\n    }\n    /**\n     * Sets the texture frames that the bullets can use when being launched.\n     *\n     * This is intended for use when you've got numeric based frames, such as\n     * those loaded via a Sprite Sheet.\n     *\n     * It works by calling `Phaser.Utils.Array.NumberArray` internally, using\n     * the min and max values provided. Then it sets the frame index to be zero.\n     *\n     * You can optionally set the cycle and random booleans, to allow bullets to\n     * cycle through the frames when they're fired, or pick one at random.\n     *\n     * @param {integer} min - The minimum value the frame can be. Usually zero.\n     * @param {integer} max - The maximum value the frame can be.\n     * @param {integer} [selcetionMethod=BULLET_FRAME_STABLE] - Specifies how the\n     *  frame for the fired bullet will be selected. See consts.BULLET_FRAME_XYZ\n     *  for options.\n     * @return {Weapon} The Weapon Plugin.\n     */\n\n  }, {\n    key: \"setBulletFrames\",\n    value: function setBulletFrames(min, max, selectionMethod) {\n      if (selectionMethod === undefined) {\n        selectionMethod = __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].BULLET_FRAME_STABLE;\n      }\n\n      if (typeof selectionMethod !== 'number' || selectionMethod < __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].BULLET_FRAME_STABLE || selectionMethod > __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].BULLET_FRAME_RANDOM) {\n        throw new Error(\"Invalid bullet frame selection method specified: \".concat(selectionMethod));\n      }\n\n      if (min > max) {\n        throw new Error(\"min frame (\".concat(min, \") must be <= max frame \").concat(max));\n      }\n\n      this.bulletFrames = Phaser.Utils.Array.NumberArray(min, max);\n      this.bulletFrameIndex = 0;\n      this.bulletFrameCycle = selectionMethod === __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].BULLET_FRAME_CYCLE;\n      this.bulletFrameRandom = selectionMethod === __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].BULLET_FRAME_RANDOM;\n      return this;\n    }\n    /**\n     * Adds a new animation under the given key. Optionally set the frames, frame rate and loop.\n     * The arguments are all the same as for `Animation.add`, and work in the same way.\n     *\n     * {@link #bulletAnimation} will be set to this animation after it's created. From that point on, all\n     * bullets fired will play using this animation. You can swap between animations by calling this method\n     * several times, and then just changing the {@link #bulletAnimation} property to the name of the animation\n     * you wish to play for the next launched bullet.\n     *\n     * If you wish to stop using animations at all, set {@link #bulletAnimation} to '' (an empty string).\n     *\n     * @param {string} name - The unique (within the Weapon instance) name for the animation, i.e. \"fire\", \"blast\".\n     * @param {Array} [frames=null] - An array of numbers/strings that correspond to the framesto add to this animation\n     * and in which order. e.g. [1, 2, 3] or ['run0', 'run1', run2]). If null then all frames will be used.\n     * @param {number} [frameRate=60] - The speed at which the animation should play.\n     * The speed is given in frames per second.\n     * @param {number} [loop=1] - Number of times to repeat the animation. Set to -1 to repeat forever.\n     * @return {Weapon} The Weapon Plugin.\n     */\n\n  }, {\n    key: \"addBulletAnimation\",\n    value: function addBulletAnimation(name, frames, frameRate, loop) {\n      if (!this.scene.sys.anims.anims.contains(name)) {\n        this.scene.sys.anims.create({\n          key: name,\n          frames: frames,\n          frameRate: frameRate,\n          loop: loop\n        });\n        this.anims[name] = this.scene.sys.anims.anims.entries[name];\n      }\n\n      this.bulletAnimation = name;\n      return this;\n    }\n    /**\n     * Uses `Game.Debug` to draw some useful information about this Weapon, including the number of bullets\n     * both in-flight, and available. And optionally the physics debug bodies of the bullets.\n     *\n     * @param {integer} [x=16] - The coordinate, in screen space, at which to draw the Weapon debug data.\n     * @param {integer} [y=32] - The coordinate, in screen space, at which to draw the Weapon debug data.\n     * @param {boolean} [debugBodies=false] - Optionally draw the physics body of every bullet in-flight.\n     */\n\n  }, {\n    key: \"debug\",\n    value: function debug(x, y, debugBodies) {}\n    /*if (x === undefined) {\n      x = 16;\n    }\n    if (y === undefined) {\n      y = 32;\n    }\n    if (debugBodies === undefined) {\n      debugBodies = false;\n    }\n     this.game.debug.text('Weapon Plugin', x, y);\n    this.game.debug.text(\n      'Bullets Alive: ' + this.bullets.total + ' - Total: ' + this.bullets.length,\n      x,\n      y + 24\n    );\n     if (debugBodies) {\n      this.bullets.forEachExists(this.game.debug.body, this.game.debug, 'rgba(255, 0, 255, 0.8)');\n    }*/\n\n    /**\n     * Internal update method, called by the Weapon Plugin.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this._bulletKillType === __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].KILL_WEAPON_BOUNDS) {\n        if (this.trackedSprite) {\n          this.trackedSprite.updateTransform();\n          this.bounds.centerOn(this.trackedSprite.x, this.trackedSprite.y);\n        } else if (this.trackedPointer) {\n          this.bounds.centerOn(this.trackedPointer.x, this.trackedPointer.y);\n        }\n      }\n\n      if (this.autofire) {\n        this.fire();\n      }\n    }\n    /**\n     * Internal update method, called by the Weapon Plugin.\n     *\n     * @protected\n     * @returns {void}\n     */\n\n  }, {\n    key: \"postRender\",\n    value: function postRender() {\n      if (!this.multiFire || !this._hasFired) {\n        return;\n      }\n\n      this._hasFired = false;\n      this._nextFire = this._tempNextFire;\n    }\n    /**\n     * Destroys this Weapon.\n     * You must release everything in here, all references, all objects, free it all up.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.scene = null;\n      this.bullets.destroy(true);\n    }\n  }, {\n    key: \"getWorldBounds\",\n    value: function getWorldBounds() {\n      var bounds;\n\n      if (this.scene.physics) {\n        bounds = this.scene.physics.world.bounds;\n      } else if (this.scene.impact) {// TODO make work with impact physics\n      } else if (this.scene.matter) {\n        bounds = this.scene.matter.world.localWorld.bounds;\n      }\n\n      return bounds;\n    }\n  }]);\n\n  return Weapon;\n}();\n/**\n * The Class of the bullets that are launched by this Weapon. Defaults to {@link Phaser.Bullet}, but can be\n * overridden before calling `createBullets` and set to your own class type.\n *\n * It should be a constructor function accepting `(game, x, y, key, frame)`.\n *\n * @name Weapon#bulletClass\n * @property {function} bulletClass\n */\n\n\nObject.defineProperty(Weapon.prototype, 'bulletClass', {\n  get: function get() {\n    return this._bulletClass;\n  },\n  set: function set(classType) {\n    this._bulletClass = classType; // `this.bullets` exists only after createBullets()\n\n    if (this.bullets) {\n      this.bullets.classType = this._bulletClass;\n    }\n  }\n});\n/**\n * This controls how the bullets will be killed. The default is `consts.KILL_WORLD_BOUNDS`.\n *\n * There are 7 different \"kill types\" available:\n *\n * * `consts.KILL_NEVER`\n * The bullets are never destroyed by the Weapon. It's up to you to destroy them via your own code.\n *\n * * `consts.KILL_LIFESPAN`\n * The bullets are automatically killed when their `bulletLifespan` amount expires.\n *\n * * `consts.KILL_DISTANCE`\n * The bullets are automatically killed when they\n * exceed `bulletDistance` pixels away from their original launch position.\n *\n * * `consts.KILL_WEAPON_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\n *\n * * `consts.KILL_CAMERA_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.Camera#bounds} rectangle.\n *\n * * `consts.KILL_WORLD_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.World#bounds} rectangle.\n *\n * * `consts.KILL_STATIC_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\n * The difference between static bounds and weapon bounds, is that a static bounds will never be adjusted to\n * match the position of a tracked sprite or pointer.\n *\n * @name Weapon#bulletKillType\n * @property {integer} bulletKillType\n */\n\nObject.defineProperty(Weapon.prototype, 'bulletKillType', {\n  get: function get() {\n    return this._bulletKillType;\n  },\n  set: function set(type) {\n    switch (type) {\n      case __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].KILL_STATIC_BOUNDS:\n      case __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].KILL_WEAPON_BOUNDS:\n        this.bulletBounds = this.bounds;\n        break;\n\n      case __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].KILL_CAMERA_BOUNDS:\n        this.bulletBounds = this.scene.sys.cameras.main._bounds;\n        break;\n\n      case __WEBPACK_IMPORTED_MODULE_1__consts__[\"a\" /* default */].KILL_WORLD_BOUNDS:\n        this.bulletBounds = this.getWorldBounds();\n        break;\n    }\n\n    this._bulletKillType = type;\n  }\n});\n/**\n * Should bullets collide with the World bounds or not?\n *\n * @name Weapon#bulletCollideWorldBounds\n * @property {boolean} bulletCollideWorldBounds\n */\n\nObject.defineProperty(Weapon.prototype, 'bulletCollideWorldBounds', {\n  get: function get() {\n    return this._bulletCollideWorldBounds;\n  },\n  set: function set(value) {\n    this._bulletCollideWorldBounds = value;\n    this.bullets.children.each(function (child) {\n      child.body.collideWorldBounds = value;\n      child.data.bodyDirty = false;\n    });\n  }\n});\n/**\n * The x coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.x`, and\n * can be overridden by the {@link #fire} arguments.\n *\n * @name Weapon#x\n * @property {number} x\n */\n\nObject.defineProperty(Weapon.prototype, 'x', {\n  get: function get() {\n    return this.fireFrom.x;\n  },\n  set: function set(value) {\n    this.fireFrom.x = value;\n  }\n});\n/**\n * The y coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.y`, and\n * can be overridden by the {@link #fire} arguments.\n *\n * @name Weapon#y\n * @property {number} y\n */\n\nObject.defineProperty(Weapon.prototype, 'y', {\n  get: function get() {\n    return this.fireFrom.y;\n  },\n  set: function set(value) {\n    this.fireFrom.y = value;\n  }\n});\n/* harmony default export */ __webpack_exports__[\"a\"] = (Weapon);\n\n/***/ })\n/******/ ])[\"default\"];\n});\n\n\n// WEBPACK FOOTER //\n// WeaponPlugin.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d823be90480fb076aac3","export default {\n  /**\n   * A {@link #bulletKillType} constant that stops the bullets from ever being destroyed automatically.\n   * @constant\n   * @type {integer}\n   */\n  KILL_NEVER: 0,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when their {@link #bulletLifespan} expires.\n   * @constant\n   * @type {integer}\n   */\n  KILL_LIFESPAN: 1,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets after they\n   * exceed the {@link #bulletDistance} from their original firing position.\n   * @constant\n   * @type {integer}\n   */\n  KILL_DISTANCE: 2,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link #bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_WEAPON_BOUNDS: 3,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Phaser.Camera#bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_CAMERA_BOUNDS: 4,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Phaser.World#bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_WORLD_BOUNDS: 5,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link #bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_STATIC_BOUNDS: 6,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face up.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_UP: 270,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face down.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_DOWN: 90,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face left.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_LEFT: 180,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face right.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_RIGHT: 0,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north east.\n   * @constant Phaser.ANGLE_NORTH_EAST\n   * @type {integer}\n   */\n  ANGLE_NORTH_EAST: 315,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north west.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_NORTH_WEST: 225,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south east.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_SOUTH_EAST: 45,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south west.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_SOUTH_WEST: 135,\n\n  /**\n   * When selecting a bullet frame the same frame should always be used. This\n   * is the default value.\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_STABLE: 0,\n\n  /**\n   * When selecting a bullet frame the next frame should be used\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_CYCLE: 1,\n\n  /**\n   * When selecting a bullet frame a random frame should be used.\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_RANDOM: 2,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./consts.js","/**\n * @author       GooeyWizard\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\n */\n\nimport consts from './consts';\n\nlet bulletID = 0;\n\nclass Bullet extends Phaser.GameObjects.Sprite {\n  /**\n   * Create a new `Bullet` object. Bullets are used by the `Weapon` class, and are normal Sprites,\n   * with a few extra properties in the data object to handle Weapon specific features.\n   *\n   * @param {Phaser.Scene} scene - A reference to the currently running scene.\n   * @param {number} x - The x coordinate (in world space) to position the Particle at.\n   * @param {number} y - The y coordinate (in world space) to position the Particle at.\n   * @param {string} key - This is the image or texture used by the Particle during rendering.\n   * It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.\n   * @param {string|number} frame - If this Particle is using part of a sprite sheet or texture atlas\n   * you can specify the exact frame to use by giving a string or numeric index.\n   */\n  constructor(scene, x, y, key, frame) {\n    super(scene, x, y, key, frame);\n    this.bulletID = bulletID;\n    bulletID++;\n    this.createBody();\n\n    this.data = {\n      timeEvent: null,\n      bulletManager: null,\n      fromX: 0,\n      fromY: 0,\n      bodyDirty: true,\n      rotateToVelocity: false,\n      killType: 0,\n      killDistance: 0,\n      bodyBounds: new Phaser.Geom.Rectangle(),\n    };\n  }\n\n  /**\n   * Prepares this bullet to be fired and interact with the rest of the scene\n   * again.\n   */\n  prepare(x, y) {\n    this.setActive(true);\n    this.setVisible(true);\n    this.body.enable = true;\n    // this.body.reset(x, y);\n    console.log(x, y);\n    Phaser.Physics.Matter.Matter.Body.setPosition(this.body, {x: x, y: y});\n    this.body.isSensor = true;\n    this.body.frictionAir = 0;\n\n    \n    this.body.debugShowBody = this.data.bulletManager.debugPhysics;\n    this.body.debugShowVelocity = this.data.bulletManager.debugPhysics;\n  }\n\n  /**\n   * Kills the Bullet, freeing it up for re-use by the Weapon bullet pool.\n   * Also dispatches the `Weapon`s kill signal.\n   * @returns {Bullet} This instance of the bullet class\n   */\n  kill() {\n    // Reproduce Phaser.Physics.Arcade.Components.Enable.disableBody because\n    // we can't assume that the bullet class has it built in.\n    // this.body.stop();\n    this.body.enable = false;\n    this.setActive(false);\n    this.setVisible(false);\n    this.body.debugShowBody = false;\n    this.body.debugShowVelocity = false;\n\n    // TODO: potentially we don't need to destroy the time event and we can\n    // just pause when the bullet is killed and restart it when it's refired.\n    // For now though do the simple thing and discard it.\n    // Another option would be to use Date.now() and manually process pause\n    // events with a flag and some math.\n    // Both of those are probably premature optimizations.\n    if (this.data.timeEvent !== null) {\n      this.data.timeEvent.destroy();\n      this.data.timeEvent = null;\n    }\n\n    this.data.bulletManager.eventEmitter.emit('kill', this);\n\n    return this;\n  }\n\n  /**\n   * Updates the Bullet, killing as required.\n   * @returns {Bullet} This instance of the bullet class\n   */\n  update() {\n    if (!this.active) {\n      // this was previously a check to this.exists\n      return;\n    }\n\n    console.log(this.data.bulletManager.bulletBounds, this.body.bounds);\n\n    if (this.data.killType > consts.KILL_LIFESPAN) {\n      if (this.data.killType === consts.KILL_DISTANCE) {\n        if (\n          new Phaser.Math.Vector2(this.data.fromX, this.data.fromY).distance(this) >\n          this.data.killDistance\n        ) {\n          this.kill();\n        }\n      } else if (\n        !Phaser.Physics.Matter.Matter.Bounds.overlaps(\n          this.data.bulletManager.bulletBounds,\n          this.body.bounds\n        )\n        // !Phaser.Geom.Intersects.RectangleToRectangle(\n        //   this.data.bulletManager.bulletBounds,\n        //   this.body.bounds\n        // )\n      ) {\n        this.kill();\n      }\n    }\n\n    if (this.data.rotateToVelocity) {\n      this.rotation = this.body.velocity.atan();\n    }\n\n    if (this.data.bulletManager.bulletWorldWrap) {\n      this.scene.matter.world.wrap(this, this.data.bulletManager.bulletWorldWrapPadding);\n    }\n  }\n\n  createBody() {\n    if(this.scene.physics) {\n      this.scene.physics.add.existing(this);\n    } else if(this.scene.impact) {\n      // TODO make work with impact physics\n    } else if(this.scene.matter) {\n      this.scene.matter.add.gameObject(this);\n    }\n  }\n}\n\nexport default Bullet;\n\n\n\n// WEBPACK FOOTER //\n// ./Bullet.js","/**\n * @author       GooeyWizard\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\n */\nimport Weapon from './Weapon';\nimport Bullet from './Bullet';\nimport consts from './consts';\n\n/**\n * The Weapon Plugin provides the ability to easily create a bullet pool\n * and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with Impact or Matter Physics.\n *\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\n * with a Group, such as move it around the display list, iterate it, etc can\n * be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link Phaser.Scene#create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.set(300, 300);\n * this.input.onDown.add(weapon.fire, this); // Update this\n * ```\n */\nclass WeaponPlugin extends Phaser.Plugins.ScenePlugin {\n  /**\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the\n   *  Phaser.Plugins.PluginManager instance.\n   */\n  constructor(scene, pluginManager) {\n    super(scene, pluginManager);\n\n    this.weapons = [];\n\n    // Register our new Game Object type\n    // pluginManager.registerGameObject('weapon', this.add);\n  }\n\n  add(bulletLimit, key, frame, group, weaponClass) {\n    if (!weaponClass) {\n      weaponClass = Weapon;\n    }\n    const weapon = new weaponClass(this.scene, bulletLimit, key, frame, group);\n\n    this.weapons.push(weapon);\n\n    return weapon;\n  }\n\n  /**\n   * Called by the PluginManager when this plugin is started.\n   * If a plugin is stopped, and then started again, this will get called again.\n   * Typically called immediately after `BasePlugin.init`.\n   *\n   * @returns {void}\n   */\n  start() {\n    this.systems.events.on('postrender', this.postRender, this);\n  }\n\n  /**\n   * If this is a Scene Plugin (i.e. installed into a Scene) then this method is called when the Scene boots.\n   * By this point the plugin properties `scene` and `systems` will have already been set.\n   * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\n   * @returns {void}\n   */\n  boot() {\n    const eventEmitter = this.systems.events;\n\n    //  Listening to the following events is entirely optional,\n    //  although we would recommend cleanly shutting down and destroying at least.\n    //  If you don't need any of these events then remove the listeners and the relevant methods too.\n\n    eventEmitter.on('preupdate', this.preUpdate, this);\n    eventEmitter.on('update', this.update, this);\n    eventEmitter.on('postupdate', this.postUpdate, this);\n\n    eventEmitter.on('pause', this.pause, this);\n    eventEmitter.on('resume', this.resume, this);\n\n    eventEmitter.on('sleep', this.sleep, this);\n    eventEmitter.on('wake', this.wake, this);\n\n    eventEmitter.on('shutdown', this.shutdown, this);\n    eventEmitter.on('destroy', this.destroy, this);\n  }\n\n  //  Called every Scene step - phase 1\n  preUpdate(time, delta) {\n    // Empty\n  }\n\n  /**\n   * Internal update method, called by the PluginManager.\n   *\n   * @protected\n   * @param {number} time - Current game time\n   * @param {number} delta - Time since last call\n   * @returns {void}\n   */\n  update(time, delta) {\n    this.weapons.forEach(weapon => {\n      weapon.update();\n    });\n  }\n\n  //  Called every Scene step - phase 3\n  postUpdate(time, delta) {\n    // Empty\n  }\n\n  /**\n   * Internal update method, called by the PluginManager.\n   *\n   * @protected\n   * @returns {void}\n   */\n  postRender() {\n    this.weapons.forEach(weapon => {\n      weapon.postRender();\n    });\n  }\n\n  //  Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\n  pause() {\n    // Empty\n  }\n\n  //  Called when a Scene is resumed from a paused state.\n  resume() {\n    // Empty\n  }\n\n  //  Called when a Scene is put to sleep.\n  //  A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\n  sleep() {\n    // Empty\n  }\n\n  //  Called when a Scene is woken from a sleeping state.\n  wake() {\n    // Empty\n  }\n\n  //  Called when a Scene shuts down,\n  //  it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\n  shutdown() {\n    // Empty\n  }\n\n  /**\n   * Destroys this Weapon.\n   * You must release everything in here, all references, all objects, free it all up.\n   * @returns {void}\n   */\n  destroy() {\n    this.pluginManager = null;\n    this.game = null;\n    this.scene = null;\n    this.systems = null;\n  }\n}\n\nWeaponPlugin.Weapon = Weapon;\nWeaponPlugin.Bullet = Bullet;\n\nWeaponPlugin.consts = consts;\n\n//  Make sure you export the plugin for webpack to expose\n\nexport default WeaponPlugin;\n\n\n\n// WEBPACK FOOTER //\n// ./main.js","/**\n * @author       GooeyWizard\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\n */\nimport Bullet from './Bullet';\nimport consts from './consts';\n\n/**\n * The Weapon provides the ability to easily create a bullet pool and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with P2 Physics.\n *\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\n * with a Group, such as move it around the display list, iterate it, etc can\n * be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link Phaser.Scene#create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.set(300, 300);\n * this.input.onDown.add(weapon.fire, this); // Update this\n * ```\n */\nclass Weapon {\n  /**\n   * TODO: a builder style interface would be neat. Can be kicked way forward\n   * into polishing.\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\n   * @param {number} bulletLimit - The number of bullets to create.\n   * @param {String} key - The texture key for the bullet.\n   * @param {String} frame - The frame name for the bullet.\n   * @param {Phaser.GameObjects.Group} group - A group to add the bullets to.\n   */\n  constructor(scene, bulletLimit, key, frame, group) {\n    this.scene = scene;\n\n    this.debugPhysics = null;\n\n    /**\n     * This is the Phaser.Group that contains all of the bullets managed by this plugin.\n     * @type {Phaser.GameObjects.Group}\n     */\n    this.bullets = null;\n\n    /**\n     * Should the bullet pool run out of bullets (i.e. they are all in flight) then this\n     * boolean controls if the Group will create a brand new bullet object or not.\n     * @type {boolean}\n     * @default\n     */\n    this.autoExpandBulletsGroup = false;\n\n    /**\n     * Will this weapon auto fire? If set to true then a new bullet will be fired\n     * based on the {@link #fireRate} value.\n     * @type {boolean}\n     * @default\n     */\n    this.autofire = false;\n\n    /**\n     * The total number of bullets this Weapon has fired so far.\n     * You can limit the number of shots allowed (via {@link #fireLimit}), and reset\n     * this total via {@link #resetShots}.\n     * @type {number}\n     * @default\n     */\n    this.shots = 0;\n\n    /**\n     * The maximum number of shots that this Weapon is allowed to fire before it stops.\n     * When the limit is his the {@link #onFireLimit} Signal is dispatched.\n     * You can reset the shot counter via {@link #resetShots}.\n     * @type {number}\n     * @default\n     */\n    this.fireLimit = 0;\n\n    /**\n     * The minimum interval between shots, in milliseconds.\n     * @type {number}\n     * @default\n     */\n    this.fireRate = 100;\n\n    /**\n     * This is a modifier that is added to the {@link #fireRate} each update to add variety\n     * to the firing rate of the Weapon. The value is given in milliseconds.\n     * If you've a `fireRate` of 200 and a `fireRateVariance` of 50 then the actual\n     * firing rate of the Weapon will be between 150 and 250.\n     * @type {number}\n     * @default\n     */\n    this.fireRateVariance = 0;\n\n    /**\n     * This is a Rectangle from within which the bullets are fired. By default it's a 1x1\n     * rectangle, the equivalent of a Point. But you can change the width and height, and if\n     * larger than 1x1 it'll pick a random point within the rectangle to launch the bullet from.\n     * @type {Phaser.Geom.Rectangle}\n     */\n    this.fireFrom = new Phaser.Geom.Rectangle(0, 0, 1, 1);\n\n    /**\n     * The angle at which the bullets are fired. This can be a const such as Phaser.ANGLE_UP\n     * or it can be any number from 0 to 360 inclusive, where 0 degrees is to the right.\n     * @type {integer}\n     * @default\n     */\n    this.fireAngle = consts.ANGLE_UP;\n\n    /**\n     * When a Bullet is fired it can optionally inherit the velocity of the `trackedSprite` if set.\n     * @type {boolean}\n     * @default\n     */\n    this.bulletInheritSpriteSpeed = false;\n\n    /**\n     * The string based name of the animation that the Bullet will be given on launch.\n     * This is set via {@link #addBulletAnimation}.\n     * @type {string}\n     * @default\n     */\n    this.bulletAnimation = '';\n\n    /**\n     * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\n     * chose for each Bullet fired to pick a random frame from the set.\n     * @type {boolean}\n     * @default\n     */\n    this.bulletFrameRandom = false;\n\n    /**\n     * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\n     * chose for each Bullet fired to use the next frame in the set. The frame index is then\n     * advanced one frame until it reaches the end of the set, then it starts from the start\n     * again. Cycling frames like this allows you to create varied bullet effects via\n     * sprite sheets.\n     * @type {boolean}\n     * @default\n     */\n    this.bulletFrameCycle = false;\n\n    /**\n     * Should the Bullets wrap around the world bounds? This automatically calls\n     * `World.wrap` on the Bullet each frame. See the docs for that method for details.\n     * @type {boolean}\n     * @default\n     */\n    this.bulletWorldWrap = false;\n\n    /**\n     * If `bulletWorldWrap` is true then you can provide an optional padding value with this\n     * property. It's added to the calculations determining when the Bullet should wrap around\n     * the world or not. The value is given in pixels.\n     * @type {integer}\n     * @default\n     */\n    this.bulletWorldWrapPadding = 0;\n\n    /**\n     * An optional angle offset applied to the Bullets when they are launched.\n     * This is useful if for example your bullet sprites have been drawn facing up, instead of\n     * to the right, and you want to fire them at an angle. In which case you can set the\n     * angle offset to be 90 and they'll be properly rotated when fired.\n     * @type {number}\n     * @default\n     */\n    this.bulletAngleOffset = 0;\n\n    /**\n     * This is a variance added to the angle of Bullets when they are fired.\n     * If you fire from an angle of 90 and have a `bulletAngleVariance` of 20 then the actual\n     * angle of the Bullets will be between 70 and 110 degrees. This is a quick way to add a\n     * great 'spread' effect to a Weapon.\n     * @type {number}\n     * @default\n     */\n    this.bulletAngleVariance = 0;\n\n    /**\n     * The initial velocity of fired bullets, in pixels per second.\n     * @type {number}\n     * @default\n     */\n    this.bulletSpeed = 200;\n\n    /**\n     * This is a variance added to the speed of Bullets when they are fired.\n     * If bullets have a {@link #bulletSpeed} value of 200, and a `bulletSpeedVariance` of 50\n     * then the actual speed of the Bullets will be between 150 and 250 pixels per second.\n     * @type {number}\n     * @default\n     */\n    this.bulletSpeedVariance = 0;\n\n    /**\n     * If you've set {@link #bulletKillType} to `consts.KILL_LIFESPAN` this controls the amount\n     * of lifespan the Bullets have set on launch. The value is given in milliseconds.\n     * When a Bullet hits its lifespan limit it will be automatically killed.\n     * @type {number}\n     * @default\n     */\n    this.bulletLifespan = 0;\n\n    /**\n     * If you've set {@link #bulletKillType} to `consts.KILL_DISTANCE` this controls the distance\n     * the Bullet can travel before it is automatically killed. The distance is given in pixels.\n     * @type {number}\n     * @default\n     */\n    this.bulletKillDistance = 0;\n\n    /**\n     * This is the amount of {@link Phaser.Physics.Arcade.Body#gravity} added to the Bullets physics body when fired.\n     * Gravity is expressed in pixels / second / second.\n     * @type {Phaser.Math.Vector2}\n     */\n    this.bulletGravity = new Phaser.Math.Vector2(0, 0);\n\n    /**\n     * Bullets can optionally adjust their rotation in-flight to match their velocity.\n     * This can create the effect of a bullet 'pointing' to the path it is following, for example\n     * an arrow being fired from a bow, and works especially well when added to {@link #bulletGravity}.\n     * @type {boolean}\n     * @default\n     */\n    this.bulletRotateToVelocity = false;\n\n    /**\n     * The Texture Key that the Bullets use when rendering.\n     * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n     * @type {string}\n     * @default\n     */\n    this.bulletKey = key || '';\n\n    /**\n     * The Texture Frame that the Bullets use when rendering.\n     * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n     * @type {string|integer}\n     * @default\n     */\n    this.bulletFrame = frame || '';\n\n    /**\n     * Private var that holds the public `bulletClass` property.\n     * @type {function}\n     * @private\n     */\n    this._bulletClass = Bullet;\n\n    /**\n     * Private var that holds the public `bulletCollideWorldBounds` property.\n     * @type {boolean}\n     * @private\n     */\n    this._bulletCollideWorldBounds = false;\n\n    /**\n     * Private var that holds the public `bulletKillType` property.\n     * @type {integer}\n     * @private\n     */\n    this._bulletKillType = consts.KILL_WORLD_BOUNDS;\n\n    /**\n     * Holds internal data about custom bullet body sizes.\n     *\n     * @type {Object}\n     * @private\n     */\n    this._data = {\n      customBody: false,\n      width: 0,\n      height: 0,\n      offsetX: 0,\n      offsetY: 0,\n    };\n\n    /**\n     * This Rectangle defines the bounds that are used when determining if a Bullet should be killed or not.\n     * It's used in combination with {@link #bulletKillType} when that is set to either `consts.KILL_WEAPON_BOUNDS`\n     * or `consts.KILL_STATIC_BOUNDS`. If you are not using either of these kill types then the bounds are ignored.\n     * If you are tracking a Sprite or Point then the bounds are centered on that object every frame.\n     *\n     * @type {Phaser.Geom.Rectangle}\n     */\n    this.bounds = new Phaser.Geom.Rectangle();\n\n    /**\n     * The Rectangle used to calculate the bullet bounds from.\n     *\n     * @type {Phaser.Geom.Rectangle}\n     * @private\n     */\n    this.bulletBounds = this.getWorldBounds();\n\n    /**\n     * This array stores the frames added via @link #setBulletFrames.\n     *\n     * @type {Array}\n     * @protected\n     */\n    this.bulletFrames = [];\n\n    /**\n     * The index of the frame within {@link #bulletFrames} that is currently being used.\n     * This value is only used if {@link #bulletFrameCycle} is set to `true`.\n     * @type {number}\n     * @private\n     */\n    this.bulletFrameIndex = 0;\n\n    /**\n     * An internal object that stores the animation data added via {@link #addBulletAnimation}.\n     * @type {Object}\n     * @private\n     */\n    this.anims = {};\n\n    /**\n     * The Sprite currently being tracked by the Weapon, if any.\n     * This is set via the {@link #trackSprite} method.\n     *\n     * @type {Phaser.GameObjects.Sprite|Object}\n     */\n    this.trackedSprite = null;\n\n    /**\n     * The Pointer currently being tracked by the Weapon, if any.\n     * This is set via the {@link #trackPointer} method.\n     *\n     * @type {Phaser.Input.Pointer}\n     */\n    this.trackedPointer = null;\n\n    /**\n     * If you want this Weapon to be able to fire more than 1 bullet in a single\n     * update, then set this property to `true`. When `true` the Weapon plugin won't\n     * set the shot / firing timers until the `postRender` phase of the game loop.\n     * This means you can call `fire` (and similar methods) as often as you like in one\n     * single game update.\n     *\n     * @type {boolean}\n     * @default\n     */\n    this.multiFire = false;\n\n    /**\n     * Internal multiFire test flag.\n     *\n     * @type {boolean}\n     */\n    this._hasFired = false;\n\n    /**\n     * If the Weapon is tracking a Sprite, should it also track the Sprites rotation?\n     * This is useful for a game such as Asteroids, where you want the weapon to fire based\n     * on the sprites rotation.\n     *\n     * @type {boolean}\n     * @default\n     */\n    this.trackRotation = false;\n\n    /**\n     * The Track Offset is a Vector2 object that allows you to specify a pixel offset that bullets use\n     * when launching from a tracked Sprite or Pointer. For example if you've got a bullet that is 2x2 pixels\n     * in size, but you're tracking a Sprite that is 32x32, then you can set `trackOffset.x = 16` to have\n     * the bullet launched from the center of the Sprite.\n     *\n     * @type {Phaser.Math.Vector2}\n     */\n    this.trackOffset = new Phaser.Math.Vector2();\n\n    /**\n     * Internal firing rate time tracking variable.\n     *\n     * @type {number}\n     * @private\n     */\n    this._nextFire = 0;\n\n    /**\n     * Internal firing rate time tracking variable used by multiFire.\n     *\n     * @type {number}\n     * @private\n     */\n    this._tempNextFire = 0;\n\n    /**\n     * Internal firing rotation tracking point.\n     *\n     * @type {Phaser.Math.Vector2}\n     * @private\n     */\n    this._rotatedPoint = new Phaser.Math.Vector2();\n\n    this.eventEmitter = new Phaser.Events.EventEmitter();\n\n    this.createBullets(bulletLimit, key, frame, group);\n  }\n\n  /**\n   * This method performs two actions: First it will check to see if the\n   * {@link #bullets} Group exists or not, and if not it creates it, adding its\n   * children to the `group` given as the 4th argument.\n   *\n   * Then it will seed the bullet pool with the `quantity` number of Bullets,\n   * using the texture key and frame provided (if any).\n   *\n   * If for example you set the quantity to be 10, then this Weapon will only\n   * ever be able to have 10 bullets in-flight simultaneously. If you try to\n   * fire an 11th bullet then nothing will happen until one, or more, of the\n   * in-flight bullets have been killed, freeing them up for use by the Weapon\n   * again.\n   *\n   * If you do not wish to have a limit set, then pass in -1 as the quantity.\n   * In this instance the Weapon will keep increasing the size of the bullet\n   * pool as needed. It will never reduce the size of the pool however, so be\n   * careful it doesn't grow too large.\n   *\n   * You can either set the texture key and frame here, or via the\n   * {@link #bulletKey} and {@link #bulletFrame} properties. You can also\n   * animate bullets, or set them to use random frames. All Bullets belonging\n   * to a single Weapon instance must share the same texture key however.\n   *\n   * @param {integer} [quantity=1] - The quantity of bullets to seed the Weapon\n   *  with. If -1 it will set the pool to automatically expand.\n   * @param {string} [key] - The Game.cache key of the image that this Sprite\n   *  will use.\n   * @param {integer|string} [frame] - If the Sprite image contains multiple\n   *  frames you can specify which one to use here.\n   * @param {Phaser.GameObjects.Group} [group] - Optional Group to add the\n   *  object to. If not specified it will be added to the World group.\n   * @return {Weapon} This Weapon instance.\n   */\n  createBullets(quantity, key, frame, group, bulletClass) {\n    if (quantity === undefined) {\n      quantity = 1;\n    }\n    if (bulletClass) {\n      this._bulletClass = bulletClass;\n    }\n    /*if (group === undefined) {\n      group = this.game.world;\n    }*/\n\n    if (this.bullets && !this.bullets.scene) {\n      this.bullets = null;\n    }\n\n    if (!this.bullets) {\n      this.bullets = this.scene.add.group({\n        classType: this._bulletClass,\n        maxSize: quantity,\n        runChildUpdate: true,\n      });\n    }\n\n    if (quantity !== 0) {\n      if (quantity === -1) {\n        this.autoExpandBulletsGroup = true;\n        quantity = 1;\n      }\n\n      this.bullets.createMultiple({\n        key,\n        frame,\n        repeat: quantity,\n        active: false,\n        visible: false,\n      });\n\n      this.bullets.children.each(function(child) {\n        child.data.bulletManager = this;\n      }, this);\n\n      this.bulletKey = key;\n      this.bulletFrame = frame;\n\n      if (group) {\n        group.addMultiple(this.bullets.children.entries);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Call a function on each in-flight bullet in this Weapon.\n   *\n   * See {@link Phaser.GameObjects.Group#forEachExists forEachExists} for more details.\n   *\n   * @param {function} callback - The function that will be called for each applicable child.\n   * The child will be passed as the first argument.\n   * @param {object} callbackContext - The context in which the function should be called (usually 'this').\n   * @param {...any} [args=(none)] - Additional arguments to pass to the callback function, after the child item.\n   * @return {Weapon} This Weapon instance.\n   */\n  forEach(callback, callbackContext) {\n    const extraArgs = arguments;\n\n    this.bullets.children.each(child => {\n      if (child.active) {\n        callback.call(callbackContext, child, extraArgs);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets {@link Phaser.Physics.Arcade.Body#enable} to `false` on each bullet in this Weapon.\n   * This has the effect of stopping them in-flight should they be moving.\n   * It also stops them being able to be checked for collision.\n   *\n   * @return {Weapon} This Weapon instance.\n   */\n  pauseAll() {\n    this.bullets.children.each(child => {\n      child.body.enable = false;\n      if (child.data.timeEvent !== null) {\n        child.data.timeEvent.paused = true;\n      }\n    }, this);\n\n    return this;\n  }\n\n  /**\n   * Sets {@link Phaser.Physics.Arcade.Body#enable} to `true` on each bullet in this Weapon.\n   * This has the effect of resuming their motion should they be in-flight.\n   * It also enables them for collision checks again.\n   *\n   * @return {Weapon} This Weapon instance.\n   */\n  resumeAll() {\n    this.bullets.children.each(child => {\n      child.body.enable = true;\n      if (child.data.timeEvent !== null) {\n        child.data.timeEvent.paused = false;\n      }\n    }, this);\n\n    return this;\n  }\n\n  /**\n   * Calls {@link Phaser.Bullet#kill} on every in-flight bullet in this Weapon.\n   * Also re-enables their physics bodies, should they have been disabled via {@link #pauseAll}.\n   *\n   * @return {Weapon} This Weapon instance.\n   */\n  killAll() {\n    this.bullets.children.each(child => {\n      if (child.active) {\n        child.kill();\n      }\n      child.body.enable = true;\n    });\n\n    return this;\n  }\n\n  /**\n   * Resets the {@link #shots} counter back to zero. This is used when you've set\n   * {@link #fireLimit} and have hit (or just wish to reset) your limit.\n   *\n   * @param {integer} [newLimit] - Optionally set a new {@link #fireLimit}.\n   * @return {Weapon} This Weapon instance.\n   */\n  resetShots(newLimit) {\n    this.shots = 0;\n\n    if (newLimit !== undefined) {\n      this.fireLimit = newLimit;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets this Weapon to track the given Sprite, or any Object with a public {@link Phaser.Component.Core#world world}\n   * Point object. When a Weapon tracks a Sprite it will automatically update its {@link #fireFrom} value to match the\n   * Sprite's position within the Game World, adjusting the coordinates based on the offset arguments.\n   *\n   * This allows you to lock a Weapon to a Sprite, so that bullets are always launched from its location.\n   *\n   * Calling `trackSprite` will reset {@link #trackedPointer} to null, should it have been set, as you can\n   * only track _either_ a Sprite, or a Pointer, at once, but not both.\n   *\n   * @param {Phaser.GameObjects.Sprite|Object} sprite - The Sprite to track the position of.\n   * @param {integer} [offsetX=0] - The horizontal offset from the Sprites position to be applied to the Weapon.\n   * @param {integer} [offsetY=0] - The vertical offset from the Sprites position to be applied to the Weapon.\n   * @param {boolean} [trackRotation=false] - Should the Weapon also track the Sprites rotation?\n   * @return {Weapon} This Weapon instance.\n   */\n  trackSprite(sprite, offsetX, offsetY, trackRotation) {\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n    if (offsetY === undefined) {\n      offsetY = 0;\n    }\n    if (trackRotation === undefined) {\n      trackRotation = false;\n    }\n\n    this.trackedPointer = null;\n    this.trackedSprite = sprite;\n    this.trackRotation = trackRotation;\n\n    this.trackOffset.set(offsetX, offsetY);\n\n    return this;\n  }\n\n  /**\n   * Sets this Weapon to track the given Pointer.\n   * When a Weapon tracks a Pointer it will automatically update its {@link #fireFrom} value to match the Pointer's\n   * position within the Game World, adjusting the coordinates based on the offset arguments.\n   *\n   * This allows you to lock a Weapon to a Pointer, so that bullets are always launched from its location.\n   *\n   * Calling `trackPointer` will reset {@link #trackedSprite} to null, should it have been set, as you can\n   * only track _either_ a Pointer, or a Sprite, at once, but not both.\n   *\n   * @param {Phaser.Input.Pointer} [pointer] - The Pointer to track the position of.\n   * Defaults to `Input.activePointer` if not specified.\n   * @param {integer} [offsetX=0] - The horizontal offset from the Pointers position to be applied to the Weapon.\n   * @param {integer} [offsetY=0] - The vertical offset from the Pointers position to be applied to the Weapon.\n   * @return {Weapon} This Weapon instance.\n   */\n  trackPointer(pointer, offsetX, offsetY) {\n    if (pointer === undefined && this.scene.input) {\n      pointer = this.scene.input.activePointer;\n    }\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n    if (offsetY === undefined) {\n      offsetY = 0;\n    }\n\n    this.trackedPointer = pointer;\n    this.trackedSprite = null;\n    this.trackRotation = false;\n\n    this.trackOffset.set(offsetX, offsetY);\n\n    return this;\n  }\n\n  /**\n   * Attempts to fire multiple bullets from the positions defined in the given array.\n   *\n   * If you provide a `from` argument, or if there is a tracked Sprite or Pointer, then\n   * the positions are treated as __offsets__ from the given objects position.\n   *\n   * If `from` is undefined, and there is no tracked object, then the bullets are fired\n   * from the given positions, as they exist in the world.\n   *\n   * Calling this method sets {@link #multiFire} to `true`.\n   *\n   * If there are not enough bullets available in the pool, and the pool cannot be extended,\n   * then this method may not fire from all of the given positions.\n   *\n   * When the bullets are launched they have their texture and frame updated, as required.\n   * The velocity of the bullets are calculated based on Weapon properties like {@link #bulletSpeed}.\n   *\n   * @param {array} positions - An array of positions. Each position can be any Object,\n   * as long as it has public `x` and `y` properties, such as Phaser.Point, { x: 0, y: 0 }, Phaser.Sprite, etc.\n   * @param {Phaser.GameObject.Sprite|Phaser.Math.Vector2|Object|string} [from]\n   * Optionally fires the bullets **from** the `x` and `y` properties of this object,\n   * _instead_ of any {@link #trackedSprite} or `trackedPointer` that is set.\n   * @return {array} An array containing all of the fired Phaser.Bullet objects,\n   * if a launch was successful, otherwise an empty array.\n   */\n  fireMany(positions, from) {\n    this.multiFire = true;\n\n    const bullets = [];\n\n    if (from || this.trackedSprite || this.trackedPointer) {\n      positions.forEach(offset => {\n        bullets.push(this.fire(from, null, null, offset.x, offset.y));\n      });\n    } else {\n      positions.forEach(position => {\n        bullets.push(this.fire(position));\n      });\n    }\n\n    return bullets;\n  }\n\n  /**\n   * Attempts to fire a single Bullet from a tracked Sprite or Pointer, but applies an offset\n   * to the position first. This is the same as calling {@link #fire} and passing in the offset arguments.\n   *\n   * If there are no more bullets available in the pool, and the pool cannot be extended,\n   * then this method returns `null`. It will also return `null` if not enough time has expired since the last time\n   * the Weapon was fired, as defined in the {@link #fireRate} property.\n   *\n   * Otherwise the first available bullet is selected, launched, and returned.\n   *\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n   * calculated based on Weapon properties like {@link #bulletSpeed}.\n   *\n   * If you wish to fire multiple bullets in a single game update, then set {@link #multiFire} to `true`\n   * and you can call this method as many times as you like, per loop. See also {@link #fireMany}.\n   *\n   * @param {number} [offsetX=0] - The horizontal offset from the position of the tracked Sprite or Pointer,\n   * as set with {@link #trackSprite}.\n   * @param {number} [offsetY=0] - The vertical offset from the position of the tracked Sprite or Pointer,\n   * as set with {@link #trackSprite}.\n   * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\n   */\n  fireOffset(offsetX, offsetY) {\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n    if (offsetY === undefined) {\n      offsetY = 0;\n    }\n\n    return this.fire(null, null, null, offsetX, offsetY);\n  }\n\n  /**\n   * Fires a bullet **at** the given Pointer. The bullet will be launched from the {@link #fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param {Phaser.Input.Pointer} [pointer] - The Pointer to fire the bullet towards.\n   * @return {Bullet} The fired bullet if successful, null otherwise.\n   */\n  fireAtPointer(pointer) {\n    if (pointer === undefined && this.scene.input) {\n      pointer = this.scene.input.activePointer;\n    }\n\n    return this.fire(null, pointer.x, pointer.y);\n  }\n\n  /**\n   * Fires a bullet **at** the given Sprite. The bullet will be launched from the {@link #fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param {Phaser.GameObjects.Sprite} [sprite] - The Sprite to fire the bullet towards.\n   * @return {Bullet} The fired bullet if successful, null otherwise.\n   */\n  fireAtSprite(sprite) {\n    return this.fire(null, sprite.x, sprite.y);\n  }\n\n  /**\n   * Fires a bullet **at** the given coordinates. The bullet will be launched from the {@link #fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param {number} [x] - The x coordinate, in world space, to fire the bullet towards.\n   * @param {number} [y] - The y coordinate, in world space, to fire the bullet towards.\n   * @return {Bullet} The fired bullet if successful, null otherwise.\n   */\n  fireAtXY(x, y) {\n    return this.fire(null, x, y);\n  }\n\n  /**\n   * Attempts to fire a single Bullet. If there are no more bullets available in the pool,\n   * and the pool cannot be extended, then this method returns `null`. It will also return `null`\n   * if not enough time has expired since the last time the Weapon was fired,\n   * as defined in the {@link #fireRate} property.\n   *\n   * Otherwise the first available bullet is selected, launched, and returned.\n   *\n   * The arguments are all optional, but allow you to control both where the bullet is launched from, and aimed at.\n   *\n   * If you don't provide any of the arguments then it uses those set via properties such as {@link #trackedSprite},\n   * {@link #bulletAngle} and so on.\n   *\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n   * calculated based on Weapon properties like `bulletSpeed`.\n   *\n   * If you wish to fire multiple bullets in a single game update, then set `Weapon.multiFire = true`\n   * and you can call `fire` as many times as you like, per loop. Multiple fires in a single update\n   * only counts once towards the `shots` total, but you will still receive a Signal for each bullet.\n   *\n   * @param {Phaser.GameObjects.Sprite|Phaser.Math.Vector2|Object|string} [from]\n   * Optionally fires the bullet **from** the `x` and `y` properties of this object.\n   * If set this overrides {@link #trackedSprite} or `trackedPointer`. Pass `null` to ignore it.\n   * @param {number} [x] - The x coordinate, in world space, to fire the bullet **towards**.\n   * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n   * @param {number} [y] - The y coordinate, in world space, to fire the bullet **towards**.\n   * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n   * @param {number} [offsetX=0] - If the bullet is fired from a tracked Sprite or Pointer,\n   * or the `from` argument is set, this applies a horizontal offset from the launch position.\n   * @param {number} [offsetY=0] - If the bullet is fired from a tracked Sprite or Pointer,\n   * or the `from` argument is set, this applies a vertical offset from the launch position.\n   * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\n   */\n  fire(from, x, y, offsetX, offsetY) {\n    if (x === undefined) {\n      x = null;\n    }\n    if (y === undefined) {\n      y = null;\n    }\n\n    if (\n      this.scene.time.now < this._nextFire ||\n      (this.fireLimit > 0 && this.shots === this.fireLimit)\n    ) {\n      return null;\n    }\n\n    let speed = this.bulletSpeed;\n\n    //  Apply +- speed variance\n    if (this.bulletSpeedVariance !== 0) {\n      speed += Phaser.Math.Between(-this.bulletSpeedVariance, this.bulletSpeedVariance);\n    }\n\n    if (from) {\n      if (this.fireFrom.width > 1) {\n        this.fireFrom.CenterOn(from.x, from.y);\n      } else {\n        this.fireFrom.x = from.x;\n        this.fireFrom.y = from.y;\n      }\n    } else if (this.trackedSprite) {\n      if (this.trackRotation) {\n        this._rotatedPoint.set(\n          this.trackedSprite.x + this.trackOffset.x,\n          this.trackedSprite.y + this.trackOffset.y\n        );\n        Phaser.Math.RotateAround(\n          this._rotatedPoint,\n          this.trackedSprite.x,\n          this.trackedSprite.y,\n          this.trackedSprite.rotation\n        );\n\n        if (this.fireFrom.width > 1) {\n          this.fireFrom.CenterOn(this._rotatedPoint.x, this._rotatedPoint.y);\n        } else {\n          this.fireFrom.x = this._rotatedPoint.x;\n          this.fireFrom.y = this._rotatedPoint.y;\n        }\n      } else if (this.fireFrom.width > 1) {\n        this.fireFrom.CenterOn(\n          this.trackedSprite.x + this.trackOffset.x,\n          this.trackedSprite.y + this.trackOffset.y\n        );\n      } else {\n        this.fireFrom.x = this.trackedSprite.x + this.trackOffset.x;\n        this.fireFrom.y = this.trackedSprite.y + this.trackOffset.y;\n      }\n\n      if (this.bulletInheritSpriteSpeed) {\n        speed += this.trackedSprite.body.speed;\n      }\n    } else if (this.trackedPointer) {\n      if (this.fireFrom.width > 1) {\n        this.fireFrom.CenterOn(\n          this.trackedPointer.x + this.trackOffset.x,\n          this.trackedPointer.y + this.trackOffset.y\n        );\n      } else {\n        this.fireFrom.x = this.trackedPointer.x + this.trackOffset.x;\n        this.fireFrom.y = this.trackedPointer.y + this.trackOffset.y;\n      }\n    }\n\n    if (offsetX !== undefined) {\n      this.fireFrom.x += offsetX;\n    }\n\n    if (offsetY !== undefined) {\n      this.fireFrom.y += offsetY;\n    }\n\n    const randomX = this.fireFrom.x + Math.random() * this.fireFrom.width;\n    const randomY = this.fireFrom.y + Math.random() * this.fireFrom.height;\n\n    const fromX = this.fireFrom.width > 1 ? randomX : this.fireFrom.x;\n    const fromY = this.fireFrom.height > 1 ? randomY : this.fireFrom.y;\n\n    let angle = this.trackRotation ? this.trackedSprite.angle : this.fireAngle;\n\n    //  The position (in world space) to fire the bullet towards, if set\n    if (x !== null && y !== null) {\n      angle = Phaser.Math.RadToDeg(Math.atan2(y - fromY, x - fromX));\n    }\n\n    //  Apply +- angle variance\n    if (this.bulletAngleVariance !== 0) {\n      angle += Phaser.Math.Between(-this.bulletAngleVariance, this.bulletAngleVariance);\n    }\n\n    let moveX = 0;\n    let moveY = 0;\n\n    //  Avoid sin/cos for right-angled shots\n    if (angle === 0 || angle === 180) {\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n    } else if (angle === 90 || angle === 270) {\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n    } else {\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n    }\n\n    let bullet = null;\n\n    if (this.autoExpandBulletsGroup) {\n      bullet = this.bullets.getFirstDead(true, fromX, fromY, this.bulletKey, this.bulletFrame);\n      bullet.data.bulletManager = this;\n    } else {\n      bullet = this.bullets.getFirstDead(false);\n    }\n\n    if (bullet) {\n      bullet.prepare(fromX, fromY);\n      bullet.data.fromX = fromX;\n      bullet.data.fromY = fromY;\n      bullet.data.killType = this.bulletKillType;\n      bullet.data.killDistance = this.bulletKillDistance;\n      bullet.data.rotateToVelocity = this.bulletRotateToVelocity;\n\n      if (this.bulletKillType === consts.KILL_LIFESPAN) {\n        if (this.bulletLifespan <= 0) {\n          throw new Error('Invalid bulletLifespan; must be > 0');\n        }\n        bullet.data.timeEvent = this.scene.time.addEvent({\n          delay: this.bulletLifespan,\n          // TODO: test to see if we can just pass callbackContext: bullet and\n          // have it work. no need to re-bind every time we fire a bullet\n          callback: bullet.kill.bind(bullet),\n        });\n        bullet.lifespan = this.bulletLifespan;\n      }\n\n      bullet.angle = angle + this.bulletAngleOffset;\n\n      //  Frames and Animations\n      if (this.bulletAnimation) {\n        bullet.anims.play(this.bulletAnimation);\n      } else if (this.bulletFrameCycle) {\n        if (this.bulletFrameIndex >= this.bulletFrames.length) {\n          this.bulletFrameIndex = 0;\n        }\n        bullet.setTexture(this.bulletKey, this.bulletFrameIndex);\n        this.bulletFrameIndex++;\n      } else if (this.bulletFrameRandom) {\n        const nextFrame = Math.floor(Math.random() * this.bulletFrames.length);\n        bullet.setTexture(this.bulletKey, nextFrame);\n      }\n\n      if (bullet.data.bodyDirty) {\n        if (this._data.customBody) {\n          bullet.body.setSize(this._data.width, this._data.height);\n          bullet.body.setOffset(this._data.offsetX, this._data.offsetY);\n        }\n\n        bullet.body.collideWorldBounds = this.bulletCollideWorldBounds;\n\n        bullet.data.bodyDirty = false;\n      }\n\n      // bullet.body.setVelocity(moveX, moveY);\n      console.log(moveX, moveY);\n      Phaser.Physics.Matter.Matter.Body.setVelocity(bullet.body, {x: moveX/100, y: moveY/100});\n      // bullet.body.setGravity(this.bulletGravity.x, this.bulletGravity.y);\n\n      let next = 0;\n\n      if (this.bulletSpeedVariance !== 0) {\n        let rate = this.fireRate;\n\n        rate += Phaser.Math.Between(-this.fireRateVariance, this.fireRateVariance);\n\n        if (rate < 0) {\n          rate = 0;\n        }\n\n        next = this.scene.time.now + rate;\n      } else {\n        next = this.scene.time.now + this.fireRate;\n      }\n\n      if (this.multiFire) {\n        if (!this._hasFired) {\n          //  We only add 1 to the 'shots' count for multiFire shots\n          this._hasFired = true;\n          this._tempNextFire = next;\n          this.shots++;\n        }\n      } else {\n        this._nextFire = next;\n\n        this.shots++;\n      }\n\n      this.eventEmitter.emit('fire', bullet, this, speed);\n\n      if (this.fireLimit > 0 && this.shots === this.fireLimit) {\n        this.eventEmitter('firelimit', this, this.fireLimit);\n      }\n    }\n\n    return bullet;\n  }\n\n  /**\n   * You can modify the size of the physics Body the Bullets use to be any dimension you need.\n   * This allows you to make it smaller, or larger, than the parent Sprite.\n   * You can also control the x and y offset of the Body. This is the position of the\n   * Body relative to the top-left of the Sprite _texture_.\n   *\n   * For example: If you have a Sprite with a texture that is 80x100 in size,\n   * and you want the physics body to be 32x32 pixels in the middle of the texture, you would do:\n   *\n   * `setSize(32 / Math.abs(this.scale.x), 32 / Math.abs(this.scale.y), 24, 34)`\n   *\n   * Where the first two parameters are the new Body size (32x32 pixels) relative to the Sprite's scale.\n   * 24 is the horizontal offset of the Body from the top-left of the Sprites texture, and 34\n   * is the vertical offset.\n   *\n   * @param {number} width - The width of the Body.\n   * @param {number} height - The height of the Body.\n   * @param {number} [offsetX] - The X offset of the Body from the top-left of the Sprites texture.\n   * @param {number} [offsetY] - The Y offset of the Body from the top-left of the Sprites texture.\n   * @return {Weapon} The Weapon Plugin.\n   */\n  setBulletBodyOffset(width, height, offsetX, offsetY) {\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n    if (offsetY === undefined) {\n      offsetY = 0;\n    }\n\n    this._data.customBody = true;\n    this._data.width = width;\n    this._data.height = height;\n    this._data.offsetX = offsetX;\n    this._data.offsetY = offsetY;\n\n    //  Update all bullets in the pool\n    this.bullets.children.each(child => {\n      child.body.setSize(width, height);\n      child.body.setOffset(offsetX, offsetY);\n    });\n    //this.bullets.setAll('data.bodyDirty', false);\n\n    return this;\n  }\n\n  /**\n   * Sets the texture frames that the bullets can use when being launched.\n   *\n   * This is intended for use when you've got numeric based frames, such as\n   * those loaded via a Sprite Sheet.\n   *\n   * It works by calling `Phaser.Utils.Array.NumberArray` internally, using\n   * the min and max values provided. Then it sets the frame index to be zero.\n   *\n   * You can optionally set the cycle and random booleans, to allow bullets to\n   * cycle through the frames when they're fired, or pick one at random.\n   *\n   * @param {integer} min - The minimum value the frame can be. Usually zero.\n   * @param {integer} max - The maximum value the frame can be.\n   * @param {integer} [selcetionMethod=BULLET_FRAME_STABLE] - Specifies how the\n   *  frame for the fired bullet will be selected. See consts.BULLET_FRAME_XYZ\n   *  for options.\n   * @return {Weapon} The Weapon Plugin.\n   */\n  setBulletFrames(min, max, selectionMethod) {\n    if (selectionMethod === undefined) {\n      selectionMethod = consts.BULLET_FRAME_STABLE;\n    }\n    if (\n      typeof selectionMethod !== 'number' ||\n      selectionMethod < consts.BULLET_FRAME_STABLE ||\n      selectionMethod > consts.BULLET_FRAME_RANDOM\n    ) {\n      throw new Error(`Invalid bullet frame selection method specified: ${selectionMethod}`);\n    }\n\n    if (min > max) {\n      throw new Error(`min frame (${min}) must be <= max frame ${max}`);\n    }\n\n    this.bulletFrames = Phaser.Utils.Array.NumberArray(min, max);\n    this.bulletFrameIndex = 0;\n    this.bulletFrameCycle = selectionMethod === consts.BULLET_FRAME_CYCLE;\n    this.bulletFrameRandom = selectionMethod === consts.BULLET_FRAME_RANDOM;\n\n    return this;\n  }\n\n  /**\n   * Adds a new animation under the given key. Optionally set the frames, frame rate and loop.\n   * The arguments are all the same as for `Animation.add`, and work in the same way.\n   *\n   * {@link #bulletAnimation} will be set to this animation after it's created. From that point on, all\n   * bullets fired will play using this animation. You can swap between animations by calling this method\n   * several times, and then just changing the {@link #bulletAnimation} property to the name of the animation\n   * you wish to play for the next launched bullet.\n   *\n   * If you wish to stop using animations at all, set {@link #bulletAnimation} to '' (an empty string).\n   *\n   * @param {string} name - The unique (within the Weapon instance) name for the animation, i.e. \"fire\", \"blast\".\n   * @param {Array} [frames=null] - An array of numbers/strings that correspond to the framesto add to this animation\n   * and in which order. e.g. [1, 2, 3] or ['run0', 'run1', run2]). If null then all frames will be used.\n   * @param {number} [frameRate=60] - The speed at which the animation should play.\n   * The speed is given in frames per second.\n   * @param {number} [loop=1] - Number of times to repeat the animation. Set to -1 to repeat forever.\n   * @return {Weapon} The Weapon Plugin.\n   */\n  addBulletAnimation(name, frames, frameRate, loop) {\n    if (!this.scene.sys.anims.anims.contains(name)) {\n      this.scene.sys.anims.create({\n        key: name,\n        frames,\n        frameRate,\n        loop,\n      });\n\n      this.anims[name] = this.scene.sys.anims.anims.entries[name];\n    }\n\n    this.bulletAnimation = name;\n\n    return this;\n  }\n\n  /**\n   * Uses `Game.Debug` to draw some useful information about this Weapon, including the number of bullets\n   * both in-flight, and available. And optionally the physics debug bodies of the bullets.\n   *\n   * @param {integer} [x=16] - The coordinate, in screen space, at which to draw the Weapon debug data.\n   * @param {integer} [y=32] - The coordinate, in screen space, at which to draw the Weapon debug data.\n   * @param {boolean} [debugBodies=false] - Optionally draw the physics body of every bullet in-flight.\n   */\n  debug(x, y, debugBodies) {\n    /*if (x === undefined) {\n      x = 16;\n    }\n    if (y === undefined) {\n      y = 32;\n    }\n    if (debugBodies === undefined) {\n      debugBodies = false;\n    }\n\n    this.game.debug.text('Weapon Plugin', x, y);\n    this.game.debug.text(\n      'Bullets Alive: ' + this.bullets.total + ' - Total: ' + this.bullets.length,\n      x,\n      y + 24\n    );\n\n    if (debugBodies) {\n      this.bullets.forEachExists(this.game.debug.body, this.game.debug, 'rgba(255, 0, 255, 0.8)');\n    }*/\n  }\n\n  /**\n   * Internal update method, called by the Weapon Plugin.\n   * @returns {void}\n   */\n  update() {\n    if (this._bulletKillType === consts.KILL_WEAPON_BOUNDS) {\n      if (this.trackedSprite) {\n        this.trackedSprite.updateTransform();\n        this.bounds.centerOn(this.trackedSprite.x, this.trackedSprite.y);\n      } else if (this.trackedPointer) {\n        this.bounds.centerOn(this.trackedPointer.x, this.trackedPointer.y);\n      }\n    }\n\n    if (this.autofire) {\n      this.fire();\n    }\n  }\n\n  /**\n   * Internal update method, called by the Weapon Plugin.\n   *\n   * @protected\n   * @returns {void}\n   */\n  postRender() {\n    if (!this.multiFire || !this._hasFired) {\n      return;\n    }\n\n    this._hasFired = false;\n\n    this._nextFire = this._tempNextFire;\n  }\n\n  /**\n   * Destroys this Weapon.\n   * You must release everything in here, all references, all objects, free it all up.\n   * @returns {void}\n   */\n  destroy() {\n    this.scene = null;\n\n    this.bullets.destroy(true);\n  }\n\n  getWorldBounds() {\n    let bounds;\n\n    if(this.scene.physics) {\n      bounds = this.scene.physics.world.bounds;\n    } else if(this.scene.impact) {\n      // TODO make work with impact physics\n    } else if(this.scene.matter) {\n      bounds = this.scene.matter.world.localWorld.bounds;\n    }\n\n    return bounds;\n  }\n}\n\n/**\n * The Class of the bullets that are launched by this Weapon. Defaults to {@link Phaser.Bullet}, but can be\n * overridden before calling `createBullets` and set to your own class type.\n *\n * It should be a constructor function accepting `(game, x, y, key, frame)`.\n *\n * @name Weapon#bulletClass\n * @property {function} bulletClass\n */\nObject.defineProperty(Weapon.prototype, 'bulletClass', {\n  get() {\n    return this._bulletClass;\n  },\n\n  set(classType) {\n    this._bulletClass = classType;\n\n    // `this.bullets` exists only after createBullets()\n    if (this.bullets) {\n      this.bullets.classType = this._bulletClass;\n    }\n  }\n});\n\n/**\n * This controls how the bullets will be killed. The default is `consts.KILL_WORLD_BOUNDS`.\n *\n * There are 7 different \"kill types\" available:\n *\n * * `consts.KILL_NEVER`\n * The bullets are never destroyed by the Weapon. It's up to you to destroy them via your own code.\n *\n * * `consts.KILL_LIFESPAN`\n * The bullets are automatically killed when their `bulletLifespan` amount expires.\n *\n * * `consts.KILL_DISTANCE`\n * The bullets are automatically killed when they\n * exceed `bulletDistance` pixels away from their original launch position.\n *\n * * `consts.KILL_WEAPON_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\n *\n * * `consts.KILL_CAMERA_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.Camera#bounds} rectangle.\n *\n * * `consts.KILL_WORLD_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.World#bounds} rectangle.\n *\n * * `consts.KILL_STATIC_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\n * The difference between static bounds and weapon bounds, is that a static bounds will never be adjusted to\n * match the position of a tracked sprite or pointer.\n *\n * @name Weapon#bulletKillType\n * @property {integer} bulletKillType\n */\nObject.defineProperty(Weapon.prototype, 'bulletKillType', {\n  get() {\n    return this._bulletKillType;\n  },\n\n  set(type) {\n    switch (type) {\n      case consts.KILL_STATIC_BOUNDS:\n      case consts.KILL_WEAPON_BOUNDS:\n        this.bulletBounds = this.bounds;\n        break;\n\n      case consts.KILL_CAMERA_BOUNDS:\n        this.bulletBounds = this.scene.sys.cameras.main._bounds;\n        break;\n\n      case consts.KILL_WORLD_BOUNDS:\n        this.bulletBounds = this.getWorldBounds();\n        break;\n    }\n\n    this._bulletKillType = type;\n  },\n});\n\n/**\n * Should bullets collide with the World bounds or not?\n *\n * @name Weapon#bulletCollideWorldBounds\n * @property {boolean} bulletCollideWorldBounds\n */\nObject.defineProperty(Weapon.prototype, 'bulletCollideWorldBounds', {\n  get() {\n    return this._bulletCollideWorldBounds;\n  },\n\n  set(value) {\n    this._bulletCollideWorldBounds = value;\n\n    this.bullets.children.each(child => {\n      child.body.collideWorldBounds = value;\n      child.data.bodyDirty = false;\n    });\n  },\n});\n\n/**\n * The x coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.x`, and\n * can be overridden by the {@link #fire} arguments.\n *\n * @name Weapon#x\n * @property {number} x\n */\nObject.defineProperty(Weapon.prototype, 'x', {\n  get() {\n    return this.fireFrom.x;\n  },\n\n  set(value) {\n    this.fireFrom.x = value;\n  },\n});\n\n/**\n * The y coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.y`, and\n * can be overridden by the {@link #fire} arguments.\n *\n * @name Weapon#y\n * @property {number} y\n */\nObject.defineProperty(Weapon.prototype, 'y', {\n  get() {\n    return this.fireFrom.y;\n  },\n\n  set(value) {\n    this.fireFrom.y = value;\n  },\n});\n\nexport default Weapon;\n\n\n\n// WEBPACK FOOTER //\n// ./Weapon.js"],"sourceRoot":""}