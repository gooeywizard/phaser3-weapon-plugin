{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8e50d74302ccf606dfd2","webpack:///./consts.js","webpack:///./Bullet.js","webpack:///./main.js","webpack:///./Weapon.js"],"names":["KILL_NEVER","KILL_LIFESPAN","KILL_DISTANCE","KILL_WEAPON_BOUNDS","KILL_CAMERA_BOUNDS","KILL_WORLD_BOUNDS","KILL_STATIC_BOUNDS","ANGLE_UP","ANGLE_DOWN","ANGLE_LEFT","ANGLE_RIGHT","ANGLE_NORTH_EAST","ANGLE_NORTH_WEST","ANGLE_SOUTH_EAST","ANGLE_SOUTH_WEST","BULLET_FRAME_STABLE","BULLET_FRAME_CYCLE","BULLET_FRAME_RANDOM","bulletID","Bullet","scene","x","y","key","frame","createBody","data","timeEvent","bulletManager","fromX","fromY","bodyDirty","rotateToVelocity","killType","killDistance","bodyBounds","Phaser","Geom","Rectangle","setActive","setVisible","body","enable","physics","reset","impact","matter","Physics","Matter","Body","setPosition","debugShowBody","debugPhysics","debugShowVelocity","destroy","eventEmitter","emit","active","Math","Vector2","distance","kill","isOutsideBounds","rotation","velocity","atan","bulletWorldWrap","world","wrap","bulletWorldWrapPadding","Intersects","RectangleToRectangle","bulletBounds","getBounds","Bounds","overlaps","bounds","add","existing","gameObject","isSensor","frictionAir","GameObjects","Sprite","WeaponPlugin","pluginManager","weapons","bulletLimit","group","weaponClass","weapon","push","systems","events","on","postRender","preUpdate","update","postUpdate","pause","resume","sleep","wake","shutdown","time","delta","forEach","game","Plugins","ScenePlugin","Weapon","consts","bullets","autoExpandBulletsGroup","autofire","shots","fireLimit","fireRate","fireRateVariance","fireFrom","fireAngle","bulletInheritSpriteSpeed","bulletAnimation","bulletFrameRandom","bulletFrameCycle","bulletAngleOffset","bulletAngleVariance","bulletSpeed","bulletSpeedVariance","bulletLifespan","bulletKillDistance","bulletGravity","bulletRotateToVelocity","bulletKey","bulletFrame","_bulletClass","_bulletCollideWorldBounds","_bulletKillType","_data","customBody","width","height","offsetX","offsetY","getWorldBounds","bulletFrames","bulletFrameIndex","anims","trackedSprite","trackedPointer","multiFire","_hasFired","trackRotation","trackOffset","_nextFire","_tempNextFire","_rotatedPoint","Events","EventEmitter","createBullets","quantity","bulletClass","undefined","classType","maxSize","runChildUpdate","createMultiple","repeat","visible","children","each","child","addMultiple","entries","callback","callbackContext","extraArgs","arguments","call","paused","newLimit","sprite","set","pointer","input","activePointer","positions","from","offset","fire","position","now","speed","Between","CenterOn","RotateAround","randomX","random","randomY","angle","RadToDeg","atan2","moveX","moveY","cos","DegToRad","sin","bullet","getFirstDead","prepare","bulletKillType","Error","addEvent","delay","bind","lifespan","play","length","setTexture","nextFrame","floor","setSize","setOffset","collideWorldBounds","bulletCollideWorldBounds","setVelocity","setGravity","next","rate","min","max","selectionMethod","Utils","Array","NumberArray","name","frames","frameRate","loop","sys","contains","create","debugBodies","updateTransform","centerOn","localWorld","Object","defineProperty","prototype","get","type","cameras","main","_bounds","value"],"mappings":"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","file":"WeaponPlugin.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WeaponPlugin\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WeaponPlugin\"] = factory();\n\telse\n\t\troot[\"WeaponPlugin\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8e50d74302ccf606dfd2","export default {\n  /**\n   * A {@link #bulletKillType} constant that stops the bullets from ever being destroyed automatically.\n   * @constant\n   * @type {integer}\n   */\n  KILL_NEVER: 0,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when their {@link #bulletLifespan} expires.\n   * @constant\n   * @type {integer}\n   */\n  KILL_LIFESPAN: 1,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets after they\n   * exceed the {@link #bulletDistance} from their original firing position.\n   * @constant\n   * @type {integer}\n   */\n  KILL_DISTANCE: 2,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link #bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_WEAPON_BOUNDS: 3,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Phaser.Camera#bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_CAMERA_BOUNDS: 4,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Phaser.World#bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_WORLD_BOUNDS: 5,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link #bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_STATIC_BOUNDS: 6,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face up.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_UP: 270,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face down.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_DOWN: 90,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face left.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_LEFT: 180,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face right.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_RIGHT: 0,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north east.\n   * @constant Phaser.ANGLE_NORTH_EAST\n   * @type {integer}\n   */\n  ANGLE_NORTH_EAST: 315,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north west.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_NORTH_WEST: 225,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south east.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_SOUTH_EAST: 45,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south west.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_SOUTH_WEST: 135,\n\n  /**\n   * When selecting a bullet frame the same frame should always be used. This\n   * is the default value.\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_STABLE: 0,\n\n  /**\n   * When selecting a bullet frame the next frame should be used\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_CYCLE: 1,\n\n  /**\n   * When selecting a bullet frame a random frame should be used.\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_RANDOM: 2,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./consts.js","/**\n * @author       GooeyWizard\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\n */\n\nimport consts from './consts';\n\nlet bulletID = 0;\n\nclass Bullet extends Phaser.GameObjects.Sprite {\n  /**\n   * Create a new `Bullet` object. Bullets are used by the `Weapon` class, and are normal Sprites,\n   * with a few extra properties in the data object to handle Weapon specific features.\n   *\n   * @param {Phaser.Scene} scene - A reference to the currently running scene.\n   * @param {number} x - The x coordinate (in world space) to position the Particle at.\n   * @param {number} y - The y coordinate (in world space) to position the Particle at.\n   * @param {string} key - This is the image or texture used by the Particle during rendering.\n   * It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.\n   * @param {string|number} frame - If this Particle is using part of a sprite sheet or texture atlas\n   * you can specify the exact frame to use by giving a string or numeric index.\n   */\n  constructor(scene, x, y, key, frame) {\n    super(scene, x, y, key, frame);\n    this.bulletID = bulletID;\n    bulletID++;\n    this.createBody();\n\n    this.data = {\n      timeEvent: null,\n      bulletManager: null,\n      fromX: 0,\n      fromY: 0,\n      bodyDirty: true,\n      rotateToVelocity: false,\n      killType: 0,\n      killDistance: 0,\n      bodyBounds: new Phaser.Geom.Rectangle(),\n    };\n  }\n\n  /**\n   * Prepares this bullet to be fired and interact with the rest of the scene\n   * again.\n   */\n  prepare(x, y) {\n    this.setActive(true);\n    this.setVisible(true);\n    this.body.enable = true;\n\n    if(this.scene.physics) {\n      this.body.reset(x, y);\n    } else if(this.scene.impact) {\n      // do something 'impact'ful\n    } else if(this.scene.matter) {\n      Phaser.Physics.Matter.Matter.Body.setPosition(this.body, {x: x, y: y});\n    }\n    \n    this.body.debugShowBody = this.data.bulletManager.debugPhysics;\n    this.body.debugShowVelocity = this.data.bulletManager.debugPhysics;\n  }\n\n  /**\n   * Kills the Bullet, freeing it up for re-use by the Weapon bullet pool.\n   * Also dispatches the `Weapon`s kill signal.\n   * @returns {Bullet} This instance of the bullet class\n   */\n  kill() {\n    // Reproduce Phaser.Physics.Arcade.Components.Enable.disableBody because\n    // we can't assume that the bullet class has it built in.\n    // this.body.stop();\n    this.body.enable = false;\n    this.setActive(false);\n    this.setVisible(false);\n    this.body.debugShowBody = false;\n    this.body.debugShowVelocity = false;\n\n    // TODO: potentially we don't need to destroy the time event and we can\n    // just pause when the bullet is killed and restart it when it's refired.\n    // For now though do the simple thing and discard it.\n    // Another option would be to use Date.now() and manually process pause\n    // events with a flag and some math.\n    // Both of those are probably premature optimizations.\n    if (this.data.timeEvent !== null) {\n      this.data.timeEvent.destroy();\n      this.data.timeEvent = null;\n    }\n\n    this.data.bulletManager.eventEmitter.emit('kill', this);\n\n    return this;\n  }\n\n  /**\n   * Updates the Bullet, killing as required.\n   * @returns {Bullet} This instance of the bullet class\n   */\n  update() {\n    if (!this.active) {\n      // this was previously a check to this.exists\n      return;\n    }\n\n    if (this.data.killType > consts.KILL_LIFESPAN) {\n      if (this.data.killType === consts.KILL_DISTANCE) {\n        if (\n          new Phaser.Math.Vector2(this.data.fromX, this.data.fromY).distance(this) >\n          this.data.killDistance\n        ) {\n          this.kill();\n        }\n      } else if (this.isOutsideBounds()) {\n        this.kill();\n      }\n    }\n\n    if (this.data.rotateToVelocity) {\n      this.rotation = this.body.velocity.atan();\n    }\n\n    if (this.data.bulletManager.bulletWorldWrap) {\n      this.scene.matter.world.wrap(this, this.data.bulletManager.bulletWorldWrapPadding);\n    }\n  }\n\n  isOutsideBounds() {\n    if(this.scene.physics) {\n      return !Phaser.Geom.Intersects.RectangleToRectangle(this.data.bulletManager.bulletBounds, this.body.getBounds(this.data.bodyBounds));\n    } else if(this.scene.impact) {\n      // TODO impact\n    } else if(this.scene.matter) {\n      return !Phaser.Physics.Matter.Matter.Bounds.overlaps(this.data.bulletManager.bulletBounds, this.body.bounds);\n    }\n  }\n\n  createBody() {\n    if(this.scene.physics) {\n      this.scene.physics.add.existing(this);\n    } else if(this.scene.impact) {\n      // TODO make work with impact physics\n    } else if(this.scene.matter) {\n      this.scene.matter.add.gameObject(this);\n      this.body.isSensor = true;\n      this.body.frictionAir = 0;\n    }\n  }\n}\n\nexport default Bullet;\n\n\n\n// WEBPACK FOOTER //\n// ./Bullet.js","/**\n * @author       GooeyWizard\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\n */\nimport Weapon from './Weapon';\nimport Bullet from './Bullet';\nimport consts from './consts';\n\n/**\n * The Weapon Plugin provides the ability to easily create a bullet pool\n * and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with Impact or Matter Physics.\n *\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\n * with a Group, such as move it around the display list, iterate it, etc can\n * be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link Phaser.Scene#create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.set(300, 300);\n * this.input.onDown.add(weapon.fire, this); // Update this\n * ```\n */\nclass WeaponPlugin extends Phaser.Plugins.ScenePlugin {\n  /**\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the\n   *  Phaser.Plugins.PluginManager instance.\n   */\n  constructor(scene, pluginManager) {\n    super(scene, pluginManager);\n\n    this.weapons = [];\n\n    // Register our new Game Object type\n    // pluginManager.registerGameObject('weapon', this.add);\n  }\n\n  add(bulletLimit, key, frame, group, weaponClass) {\n    if (!weaponClass) {\n      weaponClass = Weapon;\n    }\n    const weapon = new weaponClass(this.scene, bulletLimit, key, frame, group);\n\n    this.weapons.push(weapon);\n\n    return weapon;\n  }\n\n  /**\n   * Called by the PluginManager when this plugin is started.\n   * If a plugin is stopped, and then started again, this will get called again.\n   * Typically called immediately after `BasePlugin.init`.\n   *\n   * @returns {void}\n   */\n  start() {\n    this.systems.events.on('postrender', this.postRender, this);\n  }\n\n  /**\n   * If this is a Scene Plugin (i.e. installed into a Scene) then this method is called when the Scene boots.\n   * By this point the plugin properties `scene` and `systems` will have already been set.\n   * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\n   * @returns {void}\n   */\n  boot() {\n    const eventEmitter = this.systems.events;\n\n    //  Listening to the following events is entirely optional,\n    //  although we would recommend cleanly shutting down and destroying at least.\n    //  If you don't need any of these events then remove the listeners and the relevant methods too.\n\n    eventEmitter.on('preupdate', this.preUpdate, this);\n    eventEmitter.on('update', this.update, this);\n    eventEmitter.on('postupdate', this.postUpdate, this);\n\n    eventEmitter.on('pause', this.pause, this);\n    eventEmitter.on('resume', this.resume, this);\n\n    eventEmitter.on('sleep', this.sleep, this);\n    eventEmitter.on('wake', this.wake, this);\n\n    eventEmitter.on('shutdown', this.shutdown, this);\n    eventEmitter.on('destroy', this.destroy, this);\n  }\n\n  //  Called every Scene step - phase 1\n  preUpdate(time, delta) {\n    // Empty\n  }\n\n  /**\n   * Internal update method, called by the PluginManager.\n   *\n   * @protected\n   * @param {number} time - Current game time\n   * @param {number} delta - Time since last call\n   * @returns {void}\n   */\n  update(time, delta) {\n    this.weapons.forEach(weapon => {\n      weapon.update();\n    });\n  }\n\n  //  Called every Scene step - phase 3\n  postUpdate(time, delta) {\n    // Empty\n  }\n\n  /**\n   * Internal update method, called by the PluginManager.\n   *\n   * @protected\n   * @returns {void}\n   */\n  postRender() {\n    this.weapons.forEach(weapon => {\n      weapon.postRender();\n    });\n  }\n\n  //  Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\n  pause() {\n    // Empty\n  }\n\n  //  Called when a Scene is resumed from a paused state.\n  resume() {\n    // Empty\n  }\n\n  //  Called when a Scene is put to sleep.\n  //  A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\n  sleep() {\n    // Empty\n  }\n\n  //  Called when a Scene is woken from a sleeping state.\n  wake() {\n    // Empty\n  }\n\n  //  Called when a Scene shuts down,\n  //  it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\n  shutdown() {\n    // Empty\n  }\n\n  /**\n   * Destroys this Weapon.\n   * You must release everything in here, all references, all objects, free it all up.\n   * @returns {void}\n   */\n  destroy() {\n    this.pluginManager = null;\n    this.game = null;\n    this.scene = null;\n    this.systems = null;\n  }\n}\n\nWeaponPlugin.Weapon = Weapon;\nWeaponPlugin.Bullet = Bullet;\n\nWeaponPlugin.consts = consts;\n\n//  Make sure you export the plugin for webpack to expose\n\nexport default WeaponPlugin;\n\n\n\n// WEBPACK FOOTER //\n// ./main.js","/**\n * @author       GooeyWizard\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\n */\nimport Bullet from './Bullet';\nimport consts from './consts';\n\n/**\n * The Weapon provides the ability to easily create a bullet pool and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with P2 Physics.\n *\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\n * with a Group, such as move it around the display list, iterate it, etc can\n * be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link Phaser.Scene#create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.set(300, 300);\n * this.input.onDown.add(weapon.fire, this); // Update this\n * ```\n */\nclass Weapon {\n  /**\n   * TODO: a builder style interface would be neat. Can be kicked way forward\n   * into polishing.\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\n   * @param {number} bulletLimit - The number of bullets to create.\n   * @param {String} key - The texture key for the bullet.\n   * @param {String} frame - The frame name for the bullet.\n   * @param {Phaser.GameObjects.Group} group - A group to add the bullets to.\n   */\n  constructor(scene, bulletLimit, key, frame, group) {\n    this.scene = scene;\n\n    this.debugPhysics = null;\n\n    /**\n     * This is the Phaser.Group that contains all of the bullets managed by this plugin.\n     * @type {Phaser.GameObjects.Group}\n     */\n    this.bullets = null;\n\n    /**\n     * Should the bullet pool run out of bullets (i.e. they are all in flight) then this\n     * boolean controls if the Group will create a brand new bullet object or not.\n     * @type {boolean}\n     * @default\n     */\n    this.autoExpandBulletsGroup = false;\n\n    /**\n     * Will this weapon auto fire? If set to true then a new bullet will be fired\n     * based on the {@link #fireRate} value.\n     * @type {boolean}\n     * @default\n     */\n    this.autofire = false;\n\n    /**\n     * The total number of bullets this Weapon has fired so far.\n     * You can limit the number of shots allowed (via {@link #fireLimit}), and reset\n     * this total via {@link #resetShots}.\n     * @type {number}\n     * @default\n     */\n    this.shots = 0;\n\n    /**\n     * The maximum number of shots that this Weapon is allowed to fire before it stops.\n     * When the limit is his the {@link #onFireLimit} Signal is dispatched.\n     * You can reset the shot counter via {@link #resetShots}.\n     * @type {number}\n     * @default\n     */\n    this.fireLimit = 0;\n\n    /**\n     * The minimum interval between shots, in milliseconds.\n     * @type {number}\n     * @default\n     */\n    this.fireRate = 100;\n\n    /**\n     * This is a modifier that is added to the {@link #fireRate} each update to add variety\n     * to the firing rate of the Weapon. The value is given in milliseconds.\n     * If you've a `fireRate` of 200 and a `fireRateVariance` of 50 then the actual\n     * firing rate of the Weapon will be between 150 and 250.\n     * @type {number}\n     * @default\n     */\n    this.fireRateVariance = 0;\n\n    /**\n     * This is a Rectangle from within which the bullets are fired. By default it's a 1x1\n     * rectangle, the equivalent of a Point. But you can change the width and height, and if\n     * larger than 1x1 it'll pick a random point within the rectangle to launch the bullet from.\n     * @type {Phaser.Geom.Rectangle}\n     */\n    this.fireFrom = new Phaser.Geom.Rectangle(0, 0, 1, 1);\n\n    /**\n     * The angle at which the bullets are fired. This can be a const such as Phaser.ANGLE_UP\n     * or it can be any number from 0 to 360 inclusive, where 0 degrees is to the right.\n     * @type {integer}\n     * @default\n     */\n    this.fireAngle = consts.ANGLE_UP;\n\n    /**\n     * When a Bullet is fired it can optionally inherit the velocity of the `trackedSprite` if set.\n     * @type {boolean}\n     * @default\n     */\n    this.bulletInheritSpriteSpeed = false;\n\n    /**\n     * The string based name of the animation that the Bullet will be given on launch.\n     * This is set via {@link #addBulletAnimation}.\n     * @type {string}\n     * @default\n     */\n    this.bulletAnimation = '';\n\n    /**\n     * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\n     * chose for each Bullet fired to pick a random frame from the set.\n     * @type {boolean}\n     * @default\n     */\n    this.bulletFrameRandom = false;\n\n    /**\n     * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\n     * chose for each Bullet fired to use the next frame in the set. The frame index is then\n     * advanced one frame until it reaches the end of the set, then it starts from the start\n     * again. Cycling frames like this allows you to create varied bullet effects via\n     * sprite sheets.\n     * @type {boolean}\n     * @default\n     */\n    this.bulletFrameCycle = false;\n\n    /**\n     * Should the Bullets wrap around the world bounds? This automatically calls\n     * `World.wrap` on the Bullet each frame. See the docs for that method for details.\n     * @type {boolean}\n     * @default\n     */\n    this.bulletWorldWrap = false;\n\n    /**\n     * If `bulletWorldWrap` is true then you can provide an optional padding value with this\n     * property. It's added to the calculations determining when the Bullet should wrap around\n     * the world or not. The value is given in pixels.\n     * @type {integer}\n     * @default\n     */\n    this.bulletWorldWrapPadding = 0;\n\n    /**\n     * An optional angle offset applied to the Bullets when they are launched.\n     * This is useful if for example your bullet sprites have been drawn facing up, instead of\n     * to the right, and you want to fire them at an angle. In which case you can set the\n     * angle offset to be 90 and they'll be properly rotated when fired.\n     * @type {number}\n     * @default\n     */\n    this.bulletAngleOffset = 0;\n\n    /**\n     * This is a variance added to the angle of Bullets when they are fired.\n     * If you fire from an angle of 90 and have a `bulletAngleVariance` of 20 then the actual\n     * angle of the Bullets will be between 70 and 110 degrees. This is a quick way to add a\n     * great 'spread' effect to a Weapon.\n     * @type {number}\n     * @default\n     */\n    this.bulletAngleVariance = 0;\n\n    /**\n     * The initial velocity of fired bullets, in pixels per second.\n     * @type {number}\n     * @default\n     */\n    this.bulletSpeed = 200;\n\n    /**\n     * This is a variance added to the speed of Bullets when they are fired.\n     * If bullets have a {@link #bulletSpeed} value of 200, and a `bulletSpeedVariance` of 50\n     * then the actual speed of the Bullets will be between 150 and 250 pixels per second.\n     * @type {number}\n     * @default\n     */\n    this.bulletSpeedVariance = 0;\n\n    /**\n     * If you've set {@link #bulletKillType} to `consts.KILL_LIFESPAN` this controls the amount\n     * of lifespan the Bullets have set on launch. The value is given in milliseconds.\n     * When a Bullet hits its lifespan limit it will be automatically killed.\n     * @type {number}\n     * @default\n     */\n    this.bulletLifespan = 0;\n\n    /**\n     * If you've set {@link #bulletKillType} to `consts.KILL_DISTANCE` this controls the distance\n     * the Bullet can travel before it is automatically killed. The distance is given in pixels.\n     * @type {number}\n     * @default\n     */\n    this.bulletKillDistance = 0;\n\n    /**\n     * This is the amount of {@link Phaser.Physics.Arcade.Body#gravity} added to the Bullets physics body when fired.\n     * Gravity is expressed in pixels / second / second.\n     * @type {Phaser.Math.Vector2}\n     */\n    this.bulletGravity = new Phaser.Math.Vector2(0, 0);\n\n    /**\n     * Bullets can optionally adjust their rotation in-flight to match their velocity.\n     * This can create the effect of a bullet 'pointing' to the path it is following, for example\n     * an arrow being fired from a bow, and works especially well when added to {@link #bulletGravity}.\n     * @type {boolean}\n     * @default\n     */\n    this.bulletRotateToVelocity = false;\n\n    /**\n     * The Texture Key that the Bullets use when rendering.\n     * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n     * @type {string}\n     * @default\n     */\n    this.bulletKey = key || '';\n\n    /**\n     * The Texture Frame that the Bullets use when rendering.\n     * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n     * @type {string|integer}\n     * @default\n     */\n    this.bulletFrame = frame || '';\n\n    /**\n     * Private var that holds the public `bulletClass` property.\n     * @type {function}\n     * @private\n     */\n    this._bulletClass = Bullet;\n\n    /**\n     * Private var that holds the public `bulletCollideWorldBounds` property.\n     * @type {boolean}\n     * @private\n     */\n    this._bulletCollideWorldBounds = false;\n\n    /**\n     * Private var that holds the public `bulletKillType` property.\n     * @type {integer}\n     * @private\n     */\n    this._bulletKillType = consts.KILL_WORLD_BOUNDS;\n\n    /**\n     * Holds internal data about custom bullet body sizes.\n     *\n     * @type {Object}\n     * @private\n     */\n    this._data = {\n      customBody: false,\n      width: 0,\n      height: 0,\n      offsetX: 0,\n      offsetY: 0,\n    };\n\n    /**\n     * This Rectangle defines the bounds that are used when determining if a Bullet should be killed or not.\n     * It's used in combination with {@link #bulletKillType} when that is set to either `consts.KILL_WEAPON_BOUNDS`\n     * or `consts.KILL_STATIC_BOUNDS`. If you are not using either of these kill types then the bounds are ignored.\n     * If you are tracking a Sprite or Point then the bounds are centered on that object every frame.\n     *\n     * @type {Phaser.Geom.Rectangle}\n     */\n    this.bounds = new Phaser.Geom.Rectangle();\n\n    /**\n     * The Rectangle used to calculate the bullet bounds from.\n     *\n     * @type {Phaser.Geom.Rectangle}\n     * @private\n     */\n    this.bulletBounds = this.getWorldBounds();\n\n    /**\n     * This array stores the frames added via @link #setBulletFrames.\n     *\n     * @type {Array}\n     * @protected\n     */\n    this.bulletFrames = [];\n\n    /**\n     * The index of the frame within {@link #bulletFrames} that is currently being used.\n     * This value is only used if {@link #bulletFrameCycle} is set to `true`.\n     * @type {number}\n     * @private\n     */\n    this.bulletFrameIndex = 0;\n\n    /**\n     * An internal object that stores the animation data added via {@link #addBulletAnimation}.\n     * @type {Object}\n     * @private\n     */\n    this.anims = {};\n\n    /**\n     * The Sprite currently being tracked by the Weapon, if any.\n     * This is set via the {@link #trackSprite} method.\n     *\n     * @type {Phaser.GameObjects.Sprite|Object}\n     */\n    this.trackedSprite = null;\n\n    /**\n     * The Pointer currently being tracked by the Weapon, if any.\n     * This is set via the {@link #trackPointer} method.\n     *\n     * @type {Phaser.Input.Pointer}\n     */\n    this.trackedPointer = null;\n\n    /**\n     * If you want this Weapon to be able to fire more than 1 bullet in a single\n     * update, then set this property to `true`. When `true` the Weapon plugin won't\n     * set the shot / firing timers until the `postRender` phase of the game loop.\n     * This means you can call `fire` (and similar methods) as often as you like in one\n     * single game update.\n     *\n     * @type {boolean}\n     * @default\n     */\n    this.multiFire = false;\n\n    /**\n     * Internal multiFire test flag.\n     *\n     * @type {boolean}\n     */\n    this._hasFired = false;\n\n    /**\n     * If the Weapon is tracking a Sprite, should it also track the Sprites rotation?\n     * This is useful for a game such as Asteroids, where you want the weapon to fire based\n     * on the sprites rotation.\n     *\n     * @type {boolean}\n     * @default\n     */\n    this.trackRotation = false;\n\n    /**\n     * The Track Offset is a Vector2 object that allows you to specify a pixel offset that bullets use\n     * when launching from a tracked Sprite or Pointer. For example if you've got a bullet that is 2x2 pixels\n     * in size, but you're tracking a Sprite that is 32x32, then you can set `trackOffset.x = 16` to have\n     * the bullet launched from the center of the Sprite.\n     *\n     * @type {Phaser.Math.Vector2}\n     */\n    this.trackOffset = new Phaser.Math.Vector2();\n\n    /**\n     * Internal firing rate time tracking variable.\n     *\n     * @type {number}\n     * @private\n     */\n    this._nextFire = 0;\n\n    /**\n     * Internal firing rate time tracking variable used by multiFire.\n     *\n     * @type {number}\n     * @private\n     */\n    this._tempNextFire = 0;\n\n    /**\n     * Internal firing rotation tracking point.\n     *\n     * @type {Phaser.Math.Vector2}\n     * @private\n     */\n    this._rotatedPoint = new Phaser.Math.Vector2();\n\n    this.eventEmitter = new Phaser.Events.EventEmitter();\n\n    this.createBullets(bulletLimit, key, frame, group);\n  }\n\n  /**\n   * This method performs two actions: First it will check to see if the\n   * {@link #bullets} Group exists or not, and if not it creates it, adding its\n   * children to the `group` given as the 4th argument.\n   *\n   * Then it will seed the bullet pool with the `quantity` number of Bullets,\n   * using the texture key and frame provided (if any).\n   *\n   * If for example you set the quantity to be 10, then this Weapon will only\n   * ever be able to have 10 bullets in-flight simultaneously. If you try to\n   * fire an 11th bullet then nothing will happen until one, or more, of the\n   * in-flight bullets have been killed, freeing them up for use by the Weapon\n   * again.\n   *\n   * If you do not wish to have a limit set, then pass in -1 as the quantity.\n   * In this instance the Weapon will keep increasing the size of the bullet\n   * pool as needed. It will never reduce the size of the pool however, so be\n   * careful it doesn't grow too large.\n   *\n   * You can either set the texture key and frame here, or via the\n   * {@link #bulletKey} and {@link #bulletFrame} properties. You can also\n   * animate bullets, or set them to use random frames. All Bullets belonging\n   * to a single Weapon instance must share the same texture key however.\n   *\n   * @param {integer} [quantity=1] - The quantity of bullets to seed the Weapon\n   *  with. If -1 it will set the pool to automatically expand.\n   * @param {string} [key] - The Game.cache key of the image that this Sprite\n   *  will use.\n   * @param {integer|string} [frame] - If the Sprite image contains multiple\n   *  frames you can specify which one to use here.\n   * @param {Phaser.GameObjects.Group} [group] - Optional Group to add the\n   *  object to. If not specified it will be added to the World group.\n   * @return {Weapon} This Weapon instance.\n   */\n  createBullets(quantity, key, frame, group, bulletClass) {\n    if (quantity === undefined) {\n      quantity = 1;\n    }\n    if (bulletClass) {\n      this._bulletClass = bulletClass;\n    }\n    /*if (group === undefined) {\n      group = this.game.world;\n    }*/\n\n    if (this.bullets && !this.bullets.scene) {\n      this.bullets = null;\n    }\n\n    if (!this.bullets) {\n      this.bullets = this.scene.add.group({\n        classType: this._bulletClass,\n        maxSize: quantity,\n        runChildUpdate: true,\n      });\n    }\n\n    if (quantity !== 0) {\n      if (quantity === -1) {\n        this.autoExpandBulletsGroup = true;\n        quantity = 1;\n      }\n\n      this.bullets.createMultiple({\n        key,\n        frame,\n        repeat: quantity,\n        active: false,\n        visible: false,\n      });\n\n      this.bullets.children.each(function(child) {\n        child.data.bulletManager = this;\n      }, this);\n\n      this.bulletKey = key;\n      this.bulletFrame = frame;\n\n      if (group) {\n        group.addMultiple(this.bullets.children.entries);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Call a function on each in-flight bullet in this Weapon.\n   *\n   * See {@link Phaser.GameObjects.Group#forEachExists forEachExists} for more details.\n   *\n   * @param {function} callback - The function that will be called for each applicable child.\n   * The child will be passed as the first argument.\n   * @param {object} callbackContext - The context in which the function should be called (usually 'this').\n   * @param {...any} [args=(none)] - Additional arguments to pass to the callback function, after the child item.\n   * @return {Weapon} This Weapon instance.\n   */\n  forEach(callback, callbackContext) {\n    const extraArgs = arguments;\n\n    this.bullets.children.each(child => {\n      if (child.active) {\n        callback.call(callbackContext, child, extraArgs);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets {@link Phaser.Physics.Arcade.Body#enable} to `false` on each bullet in this Weapon.\n   * This has the effect of stopping them in-flight should they be moving.\n   * It also stops them being able to be checked for collision.\n   *\n   * @return {Weapon} This Weapon instance.\n   */\n  pauseAll() {\n    this.bullets.children.each(child => {\n      child.body.enable = false;\n      if (child.data.timeEvent !== null) {\n        child.data.timeEvent.paused = true;\n      }\n    }, this);\n\n    return this;\n  }\n\n  /**\n   * Sets {@link Phaser.Physics.Arcade.Body#enable} to `true` on each bullet in this Weapon.\n   * This has the effect of resuming their motion should they be in-flight.\n   * It also enables them for collision checks again.\n   *\n   * @return {Weapon} This Weapon instance.\n   */\n  resumeAll() {\n    this.bullets.children.each(child => {\n      child.body.enable = true;\n      if (child.data.timeEvent !== null) {\n        child.data.timeEvent.paused = false;\n      }\n    }, this);\n\n    return this;\n  }\n\n  /**\n   * Calls {@link Phaser.Bullet#kill} on every in-flight bullet in this Weapon.\n   * Also re-enables their physics bodies, should they have been disabled via {@link #pauseAll}.\n   *\n   * @return {Weapon} This Weapon instance.\n   */\n  killAll() {\n    this.bullets.children.each(child => {\n      if (child.active) {\n        child.kill();\n      }\n      child.body.enable = true;\n    });\n\n    return this;\n  }\n\n  /**\n   * Resets the {@link #shots} counter back to zero. This is used when you've set\n   * {@link #fireLimit} and have hit (or just wish to reset) your limit.\n   *\n   * @param {integer} [newLimit] - Optionally set a new {@link #fireLimit}.\n   * @return {Weapon} This Weapon instance.\n   */\n  resetShots(newLimit) {\n    this.shots = 0;\n\n    if (newLimit !== undefined) {\n      this.fireLimit = newLimit;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets this Weapon to track the given Sprite, or any Object with a public {@link Phaser.Component.Core#world world}\n   * Point object. When a Weapon tracks a Sprite it will automatically update its {@link #fireFrom} value to match the\n   * Sprite's position within the Game World, adjusting the coordinates based on the offset arguments.\n   *\n   * This allows you to lock a Weapon to a Sprite, so that bullets are always launched from its location.\n   *\n   * Calling `trackSprite` will reset {@link #trackedPointer} to null, should it have been set, as you can\n   * only track _either_ a Sprite, or a Pointer, at once, but not both.\n   *\n   * @param {Phaser.GameObjects.Sprite|Object} sprite - The Sprite to track the position of.\n   * @param {integer} [offsetX=0] - The horizontal offset from the Sprites position to be applied to the Weapon.\n   * @param {integer} [offsetY=0] - The vertical offset from the Sprites position to be applied to the Weapon.\n   * @param {boolean} [trackRotation=false] - Should the Weapon also track the Sprites rotation?\n   * @return {Weapon} This Weapon instance.\n   */\n  trackSprite(sprite, offsetX, offsetY, trackRotation) {\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n    if (offsetY === undefined) {\n      offsetY = 0;\n    }\n    if (trackRotation === undefined) {\n      trackRotation = false;\n    }\n\n    this.trackedPointer = null;\n    this.trackedSprite = sprite;\n    this.trackRotation = trackRotation;\n\n    this.trackOffset.set(offsetX, offsetY);\n\n    return this;\n  }\n\n  /**\n   * Sets this Weapon to track the given Pointer.\n   * When a Weapon tracks a Pointer it will automatically update its {@link #fireFrom} value to match the Pointer's\n   * position within the Game World, adjusting the coordinates based on the offset arguments.\n   *\n   * This allows you to lock a Weapon to a Pointer, so that bullets are always launched from its location.\n   *\n   * Calling `trackPointer` will reset {@link #trackedSprite} to null, should it have been set, as you can\n   * only track _either_ a Pointer, or a Sprite, at once, but not both.\n   *\n   * @param {Phaser.Input.Pointer} [pointer] - The Pointer to track the position of.\n   * Defaults to `Input.activePointer` if not specified.\n   * @param {integer} [offsetX=0] - The horizontal offset from the Pointers position to be applied to the Weapon.\n   * @param {integer} [offsetY=0] - The vertical offset from the Pointers position to be applied to the Weapon.\n   * @return {Weapon} This Weapon instance.\n   */\n  trackPointer(pointer, offsetX, offsetY) {\n    if (pointer === undefined && this.scene.input) {\n      pointer = this.scene.input.activePointer;\n    }\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n    if (offsetY === undefined) {\n      offsetY = 0;\n    }\n\n    this.trackedPointer = pointer;\n    this.trackedSprite = null;\n    this.trackRotation = false;\n\n    this.trackOffset.set(offsetX, offsetY);\n\n    return this;\n  }\n\n  /**\n   * Attempts to fire multiple bullets from the positions defined in the given array.\n   *\n   * If you provide a `from` argument, or if there is a tracked Sprite or Pointer, then\n   * the positions are treated as __offsets__ from the given objects position.\n   *\n   * If `from` is undefined, and there is no tracked object, then the bullets are fired\n   * from the given positions, as they exist in the world.\n   *\n   * Calling this method sets {@link #multiFire} to `true`.\n   *\n   * If there are not enough bullets available in the pool, and the pool cannot be extended,\n   * then this method may not fire from all of the given positions.\n   *\n   * When the bullets are launched they have their texture and frame updated, as required.\n   * The velocity of the bullets are calculated based on Weapon properties like {@link #bulletSpeed}.\n   *\n   * @param {array} positions - An array of positions. Each position can be any Object,\n   * as long as it has public `x` and `y` properties, such as Phaser.Point, { x: 0, y: 0 }, Phaser.Sprite, etc.\n   * @param {Phaser.GameObject.Sprite|Phaser.Math.Vector2|Object|string} [from]\n   * Optionally fires the bullets **from** the `x` and `y` properties of this object,\n   * _instead_ of any {@link #trackedSprite} or `trackedPointer` that is set.\n   * @return {array} An array containing all of the fired Phaser.Bullet objects,\n   * if a launch was successful, otherwise an empty array.\n   */\n  fireMany(positions, from) {\n    this.multiFire = true;\n\n    const bullets = [];\n\n    if (from || this.trackedSprite || this.trackedPointer) {\n      positions.forEach(offset => {\n        bullets.push(this.fire(from, null, null, offset.x, offset.y));\n      });\n    } else {\n      positions.forEach(position => {\n        bullets.push(this.fire(position));\n      });\n    }\n\n    return bullets;\n  }\n\n  /**\n   * Attempts to fire a single Bullet from a tracked Sprite or Pointer, but applies an offset\n   * to the position first. This is the same as calling {@link #fire} and passing in the offset arguments.\n   *\n   * If there are no more bullets available in the pool, and the pool cannot be extended,\n   * then this method returns `null`. It will also return `null` if not enough time has expired since the last time\n   * the Weapon was fired, as defined in the {@link #fireRate} property.\n   *\n   * Otherwise the first available bullet is selected, launched, and returned.\n   *\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n   * calculated based on Weapon properties like {@link #bulletSpeed}.\n   *\n   * If you wish to fire multiple bullets in a single game update, then set {@link #multiFire} to `true`\n   * and you can call this method as many times as you like, per loop. See also {@link #fireMany}.\n   *\n   * @param {number} [offsetX=0] - The horizontal offset from the position of the tracked Sprite or Pointer,\n   * as set with {@link #trackSprite}.\n   * @param {number} [offsetY=0] - The vertical offset from the position of the tracked Sprite or Pointer,\n   * as set with {@link #trackSprite}.\n   * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\n   */\n  fireOffset(offsetX, offsetY) {\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n    if (offsetY === undefined) {\n      offsetY = 0;\n    }\n\n    return this.fire(null, null, null, offsetX, offsetY);\n  }\n\n  /**\n   * Fires a bullet **at** the given Pointer. The bullet will be launched from the {@link #fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param {Phaser.Input.Pointer} [pointer] - The Pointer to fire the bullet towards.\n   * @return {Bullet} The fired bullet if successful, null otherwise.\n   */\n  fireAtPointer(pointer) {\n    if (pointer === undefined && this.scene.input) {\n      pointer = this.scene.input.activePointer;\n    }\n\n    return this.fire(null, pointer.x, pointer.y);\n  }\n\n  /**\n   * Fires a bullet **at** the given Sprite. The bullet will be launched from the {@link #fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param {Phaser.GameObjects.Sprite} [sprite] - The Sprite to fire the bullet towards.\n   * @return {Bullet} The fired bullet if successful, null otherwise.\n   */\n  fireAtSprite(sprite) {\n    return this.fire(null, sprite.x, sprite.y);\n  }\n\n  /**\n   * Fires a bullet **at** the given coordinates. The bullet will be launched from the {@link #fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param {number} [x] - The x coordinate, in world space, to fire the bullet towards.\n   * @param {number} [y] - The y coordinate, in world space, to fire the bullet towards.\n   * @return {Bullet} The fired bullet if successful, null otherwise.\n   */\n  fireAtXY(x, y) {\n    return this.fire(null, x, y);\n  }\n\n  /**\n   * Attempts to fire a single Bullet. If there are no more bullets available in the pool,\n   * and the pool cannot be extended, then this method returns `null`. It will also return `null`\n   * if not enough time has expired since the last time the Weapon was fired,\n   * as defined in the {@link #fireRate} property.\n   *\n   * Otherwise the first available bullet is selected, launched, and returned.\n   *\n   * The arguments are all optional, but allow you to control both where the bullet is launched from, and aimed at.\n   *\n   * If you don't provide any of the arguments then it uses those set via properties such as {@link #trackedSprite},\n   * {@link #bulletAngle} and so on.\n   *\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n   * calculated based on Weapon properties like `bulletSpeed`.\n   *\n   * If you wish to fire multiple bullets in a single game update, then set `Weapon.multiFire = true`\n   * and you can call `fire` as many times as you like, per loop. Multiple fires in a single update\n   * only counts once towards the `shots` total, but you will still receive a Signal for each bullet.\n   *\n   * @param {Phaser.GameObjects.Sprite|Phaser.Math.Vector2|Object|string} [from]\n   * Optionally fires the bullet **from** the `x` and `y` properties of this object.\n   * If set this overrides {@link #trackedSprite} or `trackedPointer`. Pass `null` to ignore it.\n   * @param {number} [x] - The x coordinate, in world space, to fire the bullet **towards**.\n   * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n   * @param {number} [y] - The y coordinate, in world space, to fire the bullet **towards**.\n   * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n   * @param {number} [offsetX=0] - If the bullet is fired from a tracked Sprite or Pointer,\n   * or the `from` argument is set, this applies a horizontal offset from the launch position.\n   * @param {number} [offsetY=0] - If the bullet is fired from a tracked Sprite or Pointer,\n   * or the `from` argument is set, this applies a vertical offset from the launch position.\n   * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\n   */\n  fire(from, x, y, offsetX, offsetY) {\n    if (x === undefined) {\n      x = null;\n    }\n    if (y === undefined) {\n      y = null;\n    }\n\n    if (\n      this.scene.time.now < this._nextFire ||\n      (this.fireLimit > 0 && this.shots === this.fireLimit)\n    ) {\n      return null;\n    }\n\n    let speed = this.bulletSpeed;\n\n    //  Apply +- speed variance\n    if (this.bulletSpeedVariance !== 0) {\n      speed += Phaser.Math.Between(-this.bulletSpeedVariance, this.bulletSpeedVariance);\n    }\n\n    // MatterJS needs the speed scaled down\n    if(this.scene.matter) {\n      speed = speed / 100;\n    }\n\n    if (from) {\n      if (this.fireFrom.width > 1) {\n        this.fireFrom.CenterOn(from.x, from.y);\n      } else {\n        this.fireFrom.x = from.x;\n        this.fireFrom.y = from.y;\n      }\n    } else if (this.trackedSprite) {\n      if (this.trackRotation) {\n        this._rotatedPoint.set(\n          this.trackedSprite.x + this.trackOffset.x,\n          this.trackedSprite.y + this.trackOffset.y\n        );\n        Phaser.Math.RotateAround(\n          this._rotatedPoint,\n          this.trackedSprite.x,\n          this.trackedSprite.y,\n          this.trackedSprite.rotation\n        );\n\n        if (this.fireFrom.width > 1) {\n          this.fireFrom.CenterOn(this._rotatedPoint.x, this._rotatedPoint.y);\n        } else {\n          this.fireFrom.x = this._rotatedPoint.x;\n          this.fireFrom.y = this._rotatedPoint.y;\n        }\n      } else if (this.fireFrom.width > 1) {\n        this.fireFrom.CenterOn(\n          this.trackedSprite.x + this.trackOffset.x,\n          this.trackedSprite.y + this.trackOffset.y\n        );\n      } else {\n        this.fireFrom.x = this.trackedSprite.x + this.trackOffset.x;\n        this.fireFrom.y = this.trackedSprite.y + this.trackOffset.y;\n      }\n\n      if (this.bulletInheritSpriteSpeed) {\n        speed += this.trackedSprite.body.speed;\n      }\n    } else if (this.trackedPointer) {\n      if (this.fireFrom.width > 1) {\n        this.fireFrom.CenterOn(\n          this.trackedPointer.x + this.trackOffset.x,\n          this.trackedPointer.y + this.trackOffset.y\n        );\n      } else {\n        this.fireFrom.x = this.trackedPointer.x + this.trackOffset.x;\n        this.fireFrom.y = this.trackedPointer.y + this.trackOffset.y;\n      }\n    }\n\n    if (offsetX !== undefined) {\n      this.fireFrom.x += offsetX;\n    }\n\n    if (offsetY !== undefined) {\n      this.fireFrom.y += offsetY;\n    }\n\n    const randomX = this.fireFrom.x + Math.random() * this.fireFrom.width;\n    const randomY = this.fireFrom.y + Math.random() * this.fireFrom.height;\n\n    const fromX = this.fireFrom.width > 1 ? randomX : this.fireFrom.x;\n    const fromY = this.fireFrom.height > 1 ? randomY : this.fireFrom.y;\n\n    let angle = this.trackRotation ? this.trackedSprite.angle : this.fireAngle;\n\n    //  The position (in world space) to fire the bullet towards, if set\n    if (x !== null && y !== null) {\n      angle = Phaser.Math.RadToDeg(Math.atan2(y - fromY, x - fromX));\n    }\n\n    //  Apply +- angle variance\n    if (this.bulletAngleVariance !== 0) {\n      angle += Phaser.Math.Between(-this.bulletAngleVariance, this.bulletAngleVariance);\n    }\n\n    let moveX = 0;\n    let moveY = 0;\n\n    //  Avoid sin/cos for right-angled shots\n    if (angle === 0 || angle === 180) {\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n    } else if (angle === 90 || angle === 270) {\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n    } else {\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n    }\n\n    let bullet = null;\n\n    if (this.autoExpandBulletsGroup) {\n      bullet = this.bullets.getFirstDead(true, fromX, fromY, this.bulletKey, this.bulletFrame);\n      bullet.data.bulletManager = this;\n    } else {\n      bullet = this.bullets.getFirstDead(false);\n    }\n\n    if (bullet) {\n      bullet.prepare(fromX, fromY);\n      bullet.data.fromX = fromX;\n      bullet.data.fromY = fromY;\n      bullet.data.killType = this.bulletKillType;\n      bullet.data.killDistance = this.bulletKillDistance;\n      bullet.data.rotateToVelocity = this.bulletRotateToVelocity;\n\n      if (this.bulletKillType === consts.KILL_LIFESPAN) {\n        if (this.bulletLifespan <= 0) {\n          throw new Error('Invalid bulletLifespan; must be > 0');\n        }\n        bullet.data.timeEvent = this.scene.time.addEvent({\n          delay: this.bulletLifespan,\n          // TODO: test to see if we can just pass callbackContext: bullet and\n          // have it work. no need to re-bind every time we fire a bullet\n          callback: bullet.kill.bind(bullet),\n        });\n        bullet.lifespan = this.bulletLifespan;\n      }\n\n      bullet.angle = angle + this.bulletAngleOffset;\n\n      //  Frames and Animations\n      if (this.bulletAnimation) {\n        bullet.anims.play(this.bulletAnimation);\n      } else if (this.bulletFrameCycle) {\n        if (this.bulletFrameIndex >= this.bulletFrames.length) {\n          this.bulletFrameIndex = 0;\n        }\n        bullet.setTexture(this.bulletKey, this.bulletFrameIndex);\n        this.bulletFrameIndex++;\n      } else if (this.bulletFrameRandom) {\n        const nextFrame = Math.floor(Math.random() * this.bulletFrames.length);\n        bullet.setTexture(this.bulletKey, nextFrame);\n      }\n\n      if (bullet.data.bodyDirty) {\n        if (this._data.customBody) {\n          bullet.body.setSize(this._data.width, this._data.height);\n          bullet.body.setOffset(this._data.offsetX, this._data.offsetY);\n        }\n\n        bullet.body.collideWorldBounds = this.bulletCollideWorldBounds;\n\n        bullet.data.bodyDirty = false;\n      }\n\n      if(this.scene.physics) {\n        bullet.body.setVelocity(moveX, moveY);\n        bullet.body.setGravity(this.bulletGravity.x, this.bulletGravity.y);\n      } else if(this.scene.impact) {\n        // TODO impact\n      } else if(this.scene.matter) {\n        Phaser.Physics.Matter.Matter.Body.setVelocity(bullet.body, {x: moveX, y: moveY});\n      }\n\n      let next = 0;\n\n      if (this.bulletSpeedVariance !== 0) {\n        let rate = this.fireRate;\n\n        rate += Phaser.Math.Between(-this.fireRateVariance, this.fireRateVariance);\n\n        if (rate < 0) {\n          rate = 0;\n        }\n\n        next = this.scene.time.now + rate;\n      } else {\n        next = this.scene.time.now + this.fireRate;\n      }\n\n      if (this.multiFire) {\n        if (!this._hasFired) {\n          //  We only add 1 to the 'shots' count for multiFire shots\n          this._hasFired = true;\n          this._tempNextFire = next;\n          this.shots++;\n        }\n      } else {\n        this._nextFire = next;\n\n        this.shots++;\n      }\n\n      this.eventEmitter.emit('fire', bullet, this, speed);\n\n      if (this.fireLimit > 0 && this.shots === this.fireLimit) {\n        this.eventEmitter('firelimit', this, this.fireLimit);\n      }\n    }\n\n    return bullet;\n  }\n\n  /**\n   * You can modify the size of the physics Body the Bullets use to be any dimension you need.\n   * This allows you to make it smaller, or larger, than the parent Sprite.\n   * You can also control the x and y offset of the Body. This is the position of the\n   * Body relative to the top-left of the Sprite _texture_.\n   *\n   * For example: If you have a Sprite with a texture that is 80x100 in size,\n   * and you want the physics body to be 32x32 pixels in the middle of the texture, you would do:\n   *\n   * `setSize(32 / Math.abs(this.scale.x), 32 / Math.abs(this.scale.y), 24, 34)`\n   *\n   * Where the first two parameters are the new Body size (32x32 pixels) relative to the Sprite's scale.\n   * 24 is the horizontal offset of the Body from the top-left of the Sprites texture, and 34\n   * is the vertical offset.\n   *\n   * @param {number} width - The width of the Body.\n   * @param {number} height - The height of the Body.\n   * @param {number} [offsetX] - The X offset of the Body from the top-left of the Sprites texture.\n   * @param {number} [offsetY] - The Y offset of the Body from the top-left of the Sprites texture.\n   * @return {Weapon} The Weapon Plugin.\n   */\n  setBulletBodyOffset(width, height, offsetX, offsetY) {\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n    if (offsetY === undefined) {\n      offsetY = 0;\n    }\n\n    this._data.customBody = true;\n    this._data.width = width;\n    this._data.height = height;\n    this._data.offsetX = offsetX;\n    this._data.offsetY = offsetY;\n\n    //  Update all bullets in the pool\n    this.bullets.children.each(child => {\n      child.body.setSize(width, height);\n      child.body.setOffset(offsetX, offsetY);\n    });\n    //this.bullets.setAll('data.bodyDirty', false);\n\n    return this;\n  }\n\n  /**\n   * Sets the texture frames that the bullets can use when being launched.\n   *\n   * This is intended for use when you've got numeric based frames, such as\n   * those loaded via a Sprite Sheet.\n   *\n   * It works by calling `Phaser.Utils.Array.NumberArray` internally, using\n   * the min and max values provided. Then it sets the frame index to be zero.\n   *\n   * You can optionally set the cycle and random booleans, to allow bullets to\n   * cycle through the frames when they're fired, or pick one at random.\n   *\n   * @param {integer} min - The minimum value the frame can be. Usually zero.\n   * @param {integer} max - The maximum value the frame can be.\n   * @param {integer} [selcetionMethod=BULLET_FRAME_STABLE] - Specifies how the\n   *  frame for the fired bullet will be selected. See consts.BULLET_FRAME_XYZ\n   *  for options.\n   * @return {Weapon} The Weapon Plugin.\n   */\n  setBulletFrames(min, max, selectionMethod) {\n    if (selectionMethod === undefined) {\n      selectionMethod = consts.BULLET_FRAME_STABLE;\n    }\n    if (\n      typeof selectionMethod !== 'number' ||\n      selectionMethod < consts.BULLET_FRAME_STABLE ||\n      selectionMethod > consts.BULLET_FRAME_RANDOM\n    ) {\n      throw new Error(`Invalid bullet frame selection method specified: ${selectionMethod}`);\n    }\n\n    if (min > max) {\n      throw new Error(`min frame (${min}) must be <= max frame ${max}`);\n    }\n\n    this.bulletFrames = Phaser.Utils.Array.NumberArray(min, max);\n    this.bulletFrameIndex = 0;\n    this.bulletFrameCycle = selectionMethod === consts.BULLET_FRAME_CYCLE;\n    this.bulletFrameRandom = selectionMethod === consts.BULLET_FRAME_RANDOM;\n\n    return this;\n  }\n\n  /**\n   * Adds a new animation under the given key. Optionally set the frames, frame rate and loop.\n   * The arguments are all the same as for `Animation.add`, and work in the same way.\n   *\n   * {@link #bulletAnimation} will be set to this animation after it's created. From that point on, all\n   * bullets fired will play using this animation. You can swap between animations by calling this method\n   * several times, and then just changing the {@link #bulletAnimation} property to the name of the animation\n   * you wish to play for the next launched bullet.\n   *\n   * If you wish to stop using animations at all, set {@link #bulletAnimation} to '' (an empty string).\n   *\n   * @param {string} name - The unique (within the Weapon instance) name for the animation, i.e. \"fire\", \"blast\".\n   * @param {Array} [frames=null] - An array of numbers/strings that correspond to the framesto add to this animation\n   * and in which order. e.g. [1, 2, 3] or ['run0', 'run1', run2]). If null then all frames will be used.\n   * @param {number} [frameRate=60] - The speed at which the animation should play.\n   * The speed is given in frames per second.\n   * @param {number} [loop=1] - Number of times to repeat the animation. Set to -1 to repeat forever.\n   * @return {Weapon} The Weapon Plugin.\n   */\n  addBulletAnimation(name, frames, frameRate, loop) {\n    if (!this.scene.sys.anims.anims.contains(name)) {\n      this.scene.sys.anims.create({\n        key: name,\n        frames,\n        frameRate,\n        loop,\n      });\n\n      this.anims[name] = this.scene.sys.anims.anims.entries[name];\n    }\n\n    this.bulletAnimation = name;\n\n    return this;\n  }\n\n  /**\n   * Uses `Game.Debug` to draw some useful information about this Weapon, including the number of bullets\n   * both in-flight, and available. And optionally the physics debug bodies of the bullets.\n   *\n   * @param {integer} [x=16] - The coordinate, in screen space, at which to draw the Weapon debug data.\n   * @param {integer} [y=32] - The coordinate, in screen space, at which to draw the Weapon debug data.\n   * @param {boolean} [debugBodies=false] - Optionally draw the physics body of every bullet in-flight.\n   */\n  debug(x, y, debugBodies) {\n    /*if (x === undefined) {\n      x = 16;\n    }\n    if (y === undefined) {\n      y = 32;\n    }\n    if (debugBodies === undefined) {\n      debugBodies = false;\n    }\n\n    this.game.debug.text('Weapon Plugin', x, y);\n    this.game.debug.text(\n      'Bullets Alive: ' + this.bullets.total + ' - Total: ' + this.bullets.length,\n      x,\n      y + 24\n    );\n\n    if (debugBodies) {\n      this.bullets.forEachExists(this.game.debug.body, this.game.debug, 'rgba(255, 0, 255, 0.8)');\n    }*/\n  }\n\n  /**\n   * Internal update method, called by the Weapon Plugin.\n   * @returns {void}\n   */\n  update() {\n    if (this._bulletKillType === consts.KILL_WEAPON_BOUNDS) {\n      if (this.trackedSprite) {\n        this.trackedSprite.updateTransform();\n        this.bounds.centerOn(this.trackedSprite.x, this.trackedSprite.y);\n      } else if (this.trackedPointer) {\n        this.bounds.centerOn(this.trackedPointer.x, this.trackedPointer.y);\n      }\n    }\n\n    if (this.autofire) {\n      this.fire();\n    }\n  }\n\n  /**\n   * Internal update method, called by the Weapon Plugin.\n   *\n   * @protected\n   * @returns {void}\n   */\n  postRender() {\n    if (!this.multiFire || !this._hasFired) {\n      return;\n    }\n\n    this._hasFired = false;\n\n    this._nextFire = this._tempNextFire;\n  }\n\n  /**\n   * Destroys this Weapon.\n   * You must release everything in here, all references, all objects, free it all up.\n   * @returns {void}\n   */\n  destroy() {\n    this.scene = null;\n\n    this.bullets.destroy(true);\n  }\n\n  getWorldBounds() {\n    let bounds;\n\n    if(this.scene.physics) {\n      bounds = this.scene.physics.world.bounds;\n    } else if(this.scene.impact) {\n      // TODO make work with impact physics\n    } else if(this.scene.matter) {\n      bounds = this.scene.matter.world.localWorld.bounds;\n    }\n\n    return bounds;\n  }\n}\n\n/**\n * The Class of the bullets that are launched by this Weapon. Defaults to {@link Phaser.Bullet}, but can be\n * overridden before calling `createBullets` and set to your own class type.\n *\n * It should be a constructor function accepting `(game, x, y, key, frame)`.\n *\n * @name Weapon#bulletClass\n * @property {function} bulletClass\n */\nObject.defineProperty(Weapon.prototype, 'bulletClass', {\n  get() {\n    return this._bulletClass;\n  },\n\n  set(classType) {\n    this._bulletClass = classType;\n\n    // `this.bullets` exists only after createBullets()\n    if (this.bullets) {\n      this.bullets.classType = this._bulletClass;\n    }\n  }\n});\n\n/**\n * This controls how the bullets will be killed. The default is `consts.KILL_WORLD_BOUNDS`.\n *\n * There are 7 different \"kill types\" available:\n *\n * * `consts.KILL_NEVER`\n * The bullets are never destroyed by the Weapon. It's up to you to destroy them via your own code.\n *\n * * `consts.KILL_LIFESPAN`\n * The bullets are automatically killed when their `bulletLifespan` amount expires.\n *\n * * `consts.KILL_DISTANCE`\n * The bullets are automatically killed when they\n * exceed `bulletDistance` pixels away from their original launch position.\n *\n * * `consts.KILL_WEAPON_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\n *\n * * `consts.KILL_CAMERA_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.Camera#bounds} rectangle.\n *\n * * `consts.KILL_WORLD_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.World#bounds} rectangle.\n *\n * * `consts.KILL_STATIC_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\n * The difference between static bounds and weapon bounds, is that a static bounds will never be adjusted to\n * match the position of a tracked sprite or pointer.\n *\n * @name Weapon#bulletKillType\n * @property {integer} bulletKillType\n */\nObject.defineProperty(Weapon.prototype, 'bulletKillType', {\n  get() {\n    return this._bulletKillType;\n  },\n\n  set(type) {\n    switch (type) {\n      case consts.KILL_STATIC_BOUNDS:\n      case consts.KILL_WEAPON_BOUNDS:\n        this.bulletBounds = this.bounds;\n        break;\n\n      case consts.KILL_CAMERA_BOUNDS:\n        this.bulletBounds = this.scene.sys.cameras.main._bounds;\n        break;\n\n      case consts.KILL_WORLD_BOUNDS:\n        this.bulletBounds = this.getWorldBounds();\n        break;\n    }\n\n    this._bulletKillType = type;\n  },\n});\n\n/**\n * Should bullets collide with the World bounds or not?\n *\n * @name Weapon#bulletCollideWorldBounds\n * @property {boolean} bulletCollideWorldBounds\n */\nObject.defineProperty(Weapon.prototype, 'bulletCollideWorldBounds', {\n  get() {\n    return this._bulletCollideWorldBounds;\n  },\n\n  set(value) {\n    this._bulletCollideWorldBounds = value;\n\n    this.bullets.children.each(child => {\n      child.body.collideWorldBounds = value;\n      child.data.bodyDirty = false;\n    });\n  },\n});\n\n/**\n * The x coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.x`, and\n * can be overridden by the {@link #fire} arguments.\n *\n * @name Weapon#x\n * @property {number} x\n */\nObject.defineProperty(Weapon.prototype, 'x', {\n  get() {\n    return this.fireFrom.x;\n  },\n\n  set(value) {\n    this.fireFrom.x = value;\n  },\n});\n\n/**\n * The y coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.y`, and\n * can be overridden by the {@link #fire} arguments.\n *\n * @name Weapon#y\n * @property {number} y\n */\nObject.defineProperty(Weapon.prototype, 'y', {\n  get() {\n    return this.fireFrom.y;\n  },\n\n  set(value) {\n    this.fireFrom.y = value;\n  },\n});\n\nexport default Weapon;\n\n\n\n// WEBPACK FOOTER //\n// ./Weapon.js"],"sourceRoot":""}